ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ADC.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC_Init,"ax",%progbits
  20              		.align	1
  21              		.global	ADC_Init
  22              		.code	16
  23              		.thumb_func
  24              		.type	ADC_Init, %function
  25              	ADC_Init:
  26              	.LFB3:
  27              		.file 1 "Generated_Source\\PSoC4\\ADC.c"
   1:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:Generated_Source\PSoC4/ADC.c **** * Version 2.50
   4:Generated_Source\PSoC4/ADC.c **** *
   5:Generated_Source\PSoC4/ADC.c **** * Description:
   6:Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC.c **** *
   9:Generated_Source\PSoC4/ADC.c **** * Note:
  10:Generated_Source\PSoC4/ADC.c **** *
  11:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/ADC.c **** 
  18:Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:Generated_Source\PSoC4/ADC.c **** 
  20:Generated_Source\PSoC4/ADC.c **** 
  21:Generated_Source\PSoC4/ADC.c **** /***************************************
  22:Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/ADC.c **** 
  28:Generated_Source\PSoC4/ADC.c **** 
  29:Generated_Source\PSoC4/ADC.c **** /***************************************
  30:Generated_Source\PSoC4/ADC.c **** * Local data allocation
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 2


  31:Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u };
  34:Generated_Source\PSoC4/ADC.c **** 
  35:Generated_Source\PSoC4/ADC.c **** 
  36:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC.c **** *
  40:Generated_Source\PSoC4/ADC.c **** * Summary:
  41:Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC.c **** *
  45:Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC.c **** *  None.
  47:Generated_Source\PSoC4/ADC.c **** *
  48:Generated_Source\PSoC4/ADC.c **** * Return:
  49:Generated_Source\PSoC4/ADC.c **** *  None.
  50:Generated_Source\PSoC4/ADC.c **** *
  51:Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:Generated_Source\PSoC4/ADC.c **** *
  62:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:Generated_Source\PSoC4/ADC.c **** {
  65:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  67:Generated_Source\PSoC4/ADC.c ****     {
  68:Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  69:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  70:Generated_Source\PSoC4/ADC.c ****     }
  71:Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  72:Generated_Source\PSoC4/ADC.c **** }
  73:Generated_Source\PSoC4/ADC.c **** 
  74:Generated_Source\PSoC4/ADC.c **** 
  75:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC.c **** *
  79:Generated_Source\PSoC4/ADC.c **** * Summary:
  80:Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:Generated_Source\PSoC4/ADC.c **** *
  84:Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:Generated_Source\PSoC4/ADC.c **** *  None.
  86:Generated_Source\PSoC4/ADC.c **** *
  87:Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 3


  88:Generated_Source\PSoC4/ADC.c **** *  None.
  89:Generated_Source\PSoC4/ADC.c **** *
  90:Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC.c **** *
  93:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:Generated_Source\PSoC4/ADC.c **** {
  28              		.loc 1 95 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  96:Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC.c **** 
 100:Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC.c ****         {
 103:Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 4


 137:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/ADC.c ****         };
 168:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/ADC.c **** 
 170:Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  36              		.loc 1 172 0
  37 0002 0321     		movs	r1, #3
  38 0004 0F20     		movs	r0, #15
  39 0006 FFF7FEFF 		bl	CyIntSetPriority
  40              	.LVL0:
 173:Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  41              		.loc 1 173 0
  42 000a 1F49     		ldr	r1, .L5
  43 000c 0F20     		movs	r0, #15
  44 000e FFF7FEFF 		bl	CyIntSetVector
  45              	.LVL1:
 174:Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:Generated_Source\PSoC4/ADC.c **** 
 176:Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
  46              		.loc 1 177 0
  47 0012 0122     		movs	r2, #1
  48 0014 1D4B     		ldr	r3, .L5+4
  49 0016 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 5


 180:Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
  50              		.loc 1 180 0
  51 0018 1D4B     		ldr	r3, .L5+8
  52 001a 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
  53              		.loc 1 178 0
  54 001c 002B     		cmp	r3, #0
  55 001e 01DB     		blt	.L3
  56 0020 1C49     		ldr	r1, .L5+12
  57 0022 00E0     		b	.L2
  58              	.L3:
  59 0024 1C49     		ldr	r1, .L5+16
  60              	.L2:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
  61              		.loc 1 178 0 is_stmt 0 discriminator 4
  62 0026 1D4A     		ldr	r2, .L5+20
 181:Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 186:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 187:Generated_Source\PSoC4/ADC.c ****     
 188:Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
  63              		.loc 1 190 0 is_stmt 1 discriminator 4
  64 0028 8020     		movs	r0, #128
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
  65              		.loc 1 178 0 discriminator 4
  66 002a 1368     		ldr	r3, [r2]
  67              		.loc 1 190 0 discriminator 4
  68 002c 4002     		lsls	r0, r0, #9
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
  69              		.loc 1 178 0 discriminator 4
  70 002e 0B43     		orrs	r3, r1
  71 0030 1360     		str	r3, [r2]
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
  72              		.loc 1 182 0 discriminator 4
  73 0032 1B4A     		ldr	r2, .L5+24
  74 0034 1B4B     		ldr	r3, .L5+28
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
  75              		.loc 1 185 0 discriminator 4
  76 0036 1C49     		ldr	r1, .L5+32
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
  77              		.loc 1 182 0 discriminator 4
  78 0038 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
  79              		.loc 1 183 0 discriminator 4
  80 003a 1C4A     		ldr	r2, .L5+36
  81 003c 1C4B     		ldr	r3, .L5+40
 191:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 194:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 6


 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 199:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 200:Generated_Source\PSoC4/ADC.c **** 
 201:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/ADC.c **** 
 205:Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 207:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 208:Generated_Source\PSoC4/ADC.c ****     
 209:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/ADC.c ****     #else
 216:Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:Generated_Source\PSoC4/ADC.c ****         #else
 220:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 221:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 222:Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/ADC.c ****     
 226:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 227:Generated_Source\PSoC4/ADC.c **** 
 228:Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:Generated_Source\PSoC4/ADC.c **** 
 232:Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 233:Generated_Source\PSoC4/ADC.c ****     {
 234:Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 235:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 237:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/ADC.c ****         
 239:Generated_Source\PSoC4/ADC.c ****         
 240:Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/ADC.c ****         */
 244:Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:Generated_Source\PSoC4/ADC.c **** 
 249:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/ADC.c ****         {
 253:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 7


 254:Generated_Source\PSoC4/ADC.c **** 
 255:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 256:Generated_Source\PSoC4/ADC.c ****             {
 257:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 258:Generated_Source\PSoC4/ADC.c ****             }
 259:Generated_Source\PSoC4/ADC.c **** 
 260:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 261:Generated_Source\PSoC4/ADC.c ****             {
 262:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 263:Generated_Source\PSoC4/ADC.c ****             }
 264:Generated_Source\PSoC4/ADC.c ****         }
 265:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/ADC.c ****             else
 267:Generated_Source\PSoC4/ADC.c ****             {
 268:Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:Generated_Source\PSoC4/ADC.c **** 
 270:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/ADC.c ****                 {
 272:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/ADC.c ****                 }
 274:Generated_Source\PSoC4/ADC.c **** 
 275:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:Generated_Source\PSoC4/ADC.c ****                 {
 277:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/ADC.c ****                 }
 279:Generated_Source\PSoC4/ADC.c ****             }
 280:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/ADC.c **** 
 282:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 283:Generated_Source\PSoC4/ADC.c ****         {
 284:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 285:Generated_Source\PSoC4/ADC.c ****         }
 286:Generated_Source\PSoC4/ADC.c ****         else
 287:Generated_Source\PSoC4/ADC.c ****         {
 288:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 289:Generated_Source\PSoC4/ADC.c ****         }
 290:Generated_Source\PSoC4/ADC.c **** 
 291:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 292:Generated_Source\PSoC4/ADC.c ****         {
 293:Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/ADC.c ****             #else
 298:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 299:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:Generated_Source\PSoC4/ADC.c ****         }
 301:Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/ADC.c ****         {
 303:Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 306:Generated_Source\PSoC4/ADC.c ****             #else
 307:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 308:Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:Generated_Source\PSoC4/ADC.c ****         }
 310:Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 8


 311:Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 312:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 313:Generated_Source\PSoC4/ADC.c ****     }
 314:Generated_Source\PSoC4/ADC.c **** }
  82              		.loc 1 314 0 discriminator 4
  83              		@ sp needed
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
  84              		.loc 1 183 0 discriminator 4
  85 003e 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
  86              		.loc 1 184 0 discriminator 4
  87 0040 0022     		movs	r2, #0
  88 0042 1C4B     		ldr	r3, .L5+44
  89 0044 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
  90              		.loc 1 185 0 discriminator 4
  91 0046 1C4B     		ldr	r3, .L5+48
  92 0048 0B60     		str	r3, [r1]
 186:Generated_Source\PSoC4/ADC.c ****     
  93              		.loc 1 186 0 discriminator 4
  94 004a 1C49     		ldr	r1, .L5+52
  95 004c 0B60     		str	r3, [r1]
 190:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
  96              		.loc 1 190 0 discriminator 4
  97 004e 1C49     		ldr	r1, .L5+56
  98 0050 0B68     		ldr	r3, [r1]
  99 0052 0343     		orrs	r3, r0
 100 0054 0B60     		str	r3, [r1]
 199:Generated_Source\PSoC4/ADC.c **** 
 101              		.loc 1 199 0 discriminator 4
 102 0056 0121     		movs	r1, #1
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 103              		.loc 1 197 0 discriminator 4
 104 0058 1A4B     		ldr	r3, .L5+60
 105 005a 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 106              		.loc 1 198 0 discriminator 4
 107 005c 1A4B     		ldr	r3, .L5+64
 108 005e 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/ADC.c **** 
 109              		.loc 1 199 0 discriminator 4
 110 0060 1A4B     		ldr	r3, .L5+68
 111 0062 1960     		str	r1, [r3]
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 112              		.loc 1 206 0 discriminator 4
 113 0064 1A49     		ldr	r1, .L5+72
 114 0066 1B4B     		ldr	r3, .L5+76
 115 0068 0868     		ldr	r0, [r1]
 116              	.LVL2:
 117 006a 0340     		ands	r3, r0
 221:Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 118              		.loc 1 221 0 discriminator 4
 119 006c 8020     		movs	r0, #128
 120              	.LVL3:
 121 006e 8005     		lsls	r0, r0, #22
 122 0070 0343     		orrs	r3, r0
 123              	.LVL4:
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 9


 226:Generated_Source\PSoC4/ADC.c **** 
 124              		.loc 1 226 0 discriminator 4
 125 0072 0B60     		str	r3, [r1]
 126              	.LVL5:
 253:Generated_Source\PSoC4/ADC.c **** 
 127              		.loc 1 253 0 discriminator 4
 128 0074 8021     		movs	r1, #128
 129 0076 184B     		ldr	r3, .L5+80
 130 0078 C900     		lsls	r1, r1, #3
 131 007a 1960     		str	r1, [r3]
 132              	.LVL6:
 298:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 133              		.loc 1 298 0 discriminator 4
 134 007c 174B     		ldr	r3, .L5+84
 135 007e 1A80     		strh	r2, [r3]
 311:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 136              		.loc 1 311 0 discriminator 4
 137 0080 174A     		ldr	r2, .L5+88
 138 0082 184B     		ldr	r3, .L5+92
 139 0084 1A60     		str	r2, [r3]
 140              	.LVL7:
 141              		.loc 1 314 0 discriminator 4
 142 0086 10BD     		pop	{r4, pc}
 143              	.L6:
 144              		.align	2
 145              	.L5:
 146 0088 00000000 		.word	ADC_ISR
 147 008c 20003A40 		.word	1077542944
 148 0090 80033A40 		.word	1077543808
 149 0094 70020053 		.word	1392509552
 150 0098 70021053 		.word	1393558128
 151 009c 00003A40 		.word	1077542912
 152 00a0 C4000A80 		.word	-2146828092
 153 00a4 04003A40 		.word	1077542916
 154 00a8 10003A40 		.word	1077542928
 155 00ac 0000FF07 		.word	134152192
 156 00b0 18003A40 		.word	1077542936
 157 00b4 1C003A40 		.word	1077542940
 158 00b8 04000400 		.word	262148
 159 00bc 14003A40 		.word	1077542932
 160 00c0 00033A40 		.word	1077543680
 161 00c4 28023A40 		.word	1077543464
 162 00c8 38023A40 		.word	1077543480
 163 00cc 18023A40 		.word	1077543448
 164 00d0 30003A40 		.word	1077542960
 165 00d4 FEFFFFDF 		.word	-536870914
 166 00d8 80003A40 		.word	1077543040
 167 00dc 00000000 		.word	ADC_offset
 168 00e0 3E180000 		.word	6206
 169 00e4 00000000 		.word	ADC_countsPer10Volt
 170              		.cfi_endproc
 171              	.LFE3:
 172              		.size	ADC_Init, .-ADC_Init
 173              		.section	.text.ADC_Enable,"ax",%progbits
 174              		.align	1
 175              		.global	ADC_Enable
 176              		.code	16
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 10


 177              		.thumb_func
 178              		.type	ADC_Enable, %function
 179              	ADC_Enable:
 180              	.LFB4:
 315:Generated_Source\PSoC4/ADC.c **** 
 316:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:Generated_Source\PSoC4/ADC.c **** *
 320:Generated_Source\PSoC4/ADC.c **** * Summary:
 321:Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/ADC.c **** *
 323:Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:Generated_Source\PSoC4/ADC.c **** *  None.
 325:Generated_Source\PSoC4/ADC.c **** *
 326:Generated_Source\PSoC4/ADC.c **** * Return:
 327:Generated_Source\PSoC4/ADC.c **** *  None.
 328:Generated_Source\PSoC4/ADC.c **** *
 329:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:Generated_Source\PSoC4/ADC.c **** {
 181              		.loc 1 331 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 332:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 185              		.loc 1 332 0
 186 0000 084B     		ldr	r3, .L12
 331:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 187              		.loc 1 331 0
 188 0002 10B5     		push	{r4, lr}
 189              		.cfi_def_cfa_offset 8
 190              		.cfi_offset 4, -8
 191              		.cfi_offset 14, -4
 192              		.loc 1 332 0
 193 0004 1A68     		ldr	r2, [r3]
 194 0006 002A     		cmp	r2, #0
 195 0008 0BDB     		blt	.L7
 196              	.LBB4:
 197              	.LBB5:
 333:Generated_Source\PSoC4/ADC.c ****     {
 334:Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/ADC.c **** 
 336:Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 198              		.loc 1 336 0
 199 000a 0749     		ldr	r1, .L12+4
 200              	.L10:
 201 000c 0A68     		ldr	r2, [r1]
 202 000e 002A     		cmp	r2, #0
 203 0010 FCDB     		blt	.L10
 337:Generated_Source\PSoC4/ADC.c ****             {
 338:Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/ADC.c ****             }
 340:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/ADC.c ****         
 342:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 204              		.loc 1 342 0
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 11


 205 0012 8021     		movs	r1, #128
 206 0014 1A68     		ldr	r2, [r3]
 207 0016 0906     		lsls	r1, r1, #24
 208 0018 0A43     		orrs	r2, r1
 209 001a 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/ADC.c ****         
 344:Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 210              		.loc 1 345 0
 211 001c 0A20     		movs	r0, #10
 212 001e FFF7FEFF 		bl	CyDelayUs
 213              	.LVL8:
 214              	.L7:
 215              	.LBE5:
 216              	.LBE4:
 346:Generated_Source\PSoC4/ADC.c ****     }
 347:Generated_Source\PSoC4/ADC.c **** }
 217              		.loc 1 347 0
 218              		@ sp needed
 219 0022 10BD     		pop	{r4, pc}
 220              	.L13:
 221              		.align	2
 222              	.L12:
 223 0024 00003A40 		.word	1077542912
 224 0028 08023A40 		.word	1077543432
 225              		.cfi_endproc
 226              	.LFE4:
 227              		.size	ADC_Enable, .-ADC_Enable
 228              		.section	.text.ADC_Start,"ax",%progbits
 229              		.align	1
 230              		.global	ADC_Start
 231              		.code	16
 232              		.thumb_func
 233              		.type	ADC_Start, %function
 234              	ADC_Start:
 235              	.LFB2:
  64:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
 236              		.loc 1 64 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240 0000 10B5     		push	{r4, lr}
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 4, -8
 243              		.cfi_offset 14, -4
  66:Generated_Source\PSoC4/ADC.c ****     {
 244              		.loc 1 66 0
 245 0002 054C     		ldr	r4, .L16
 246 0004 2378     		ldrb	r3, [r4]
 247 0006 002B     		cmp	r3, #0
 248 0008 03D1     		bne	.L15
  68:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
 249              		.loc 1 68 0
 250 000a FFF7FEFF 		bl	ADC_Init
 251              	.LVL9:
  69:Generated_Source\PSoC4/ADC.c ****     }
 252              		.loc 1 69 0
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 12


 253 000e 0123     		movs	r3, #1
 254 0010 2370     		strb	r3, [r4]
 255              	.L15:
  71:Generated_Source\PSoC4/ADC.c **** }
 256              		.loc 1 71 0
 257 0012 FFF7FEFF 		bl	ADC_Enable
 258              	.LVL10:
  72:Generated_Source\PSoC4/ADC.c **** 
 259              		.loc 1 72 0
 260              		@ sp needed
 261 0016 10BD     		pop	{r4, pc}
 262              	.L17:
 263              		.align	2
 264              	.L16:
 265 0018 00000000 		.word	.LANCHOR0
 266              		.cfi_endproc
 267              	.LFE2:
 268              		.size	ADC_Start, .-ADC_Start
 269              		.section	.text.ADC_Stop,"ax",%progbits
 270              		.align	1
 271              		.global	ADC_Stop
 272              		.code	16
 273              		.thumb_func
 274              		.type	ADC_Stop, %function
 275              	ADC_Stop:
 276              	.LFB5:
 348:Generated_Source\PSoC4/ADC.c **** 
 349:Generated_Source\PSoC4/ADC.c **** 
 350:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:Generated_Source\PSoC4/ADC.c **** *
 354:Generated_Source\PSoC4/ADC.c **** * Summary:
 355:Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/ADC.c **** *  mode.
 357:Generated_Source\PSoC4/ADC.c **** *
 358:Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:Generated_Source\PSoC4/ADC.c **** *  None.
 360:Generated_Source\PSoC4/ADC.c **** *
 361:Generated_Source\PSoC4/ADC.c **** * Return:
 362:Generated_Source\PSoC4/ADC.c **** *  None.
 363:Generated_Source\PSoC4/ADC.c **** *
 364:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:Generated_Source\PSoC4/ADC.c **** {
 277              		.loc 1 366 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 282              		.loc 1 367 0
 283 0000 024A     		ldr	r2, .L19
 368:Generated_Source\PSoC4/ADC.c **** }
 284              		.loc 1 368 0
 285              		@ sp needed
 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 13


 286              		.loc 1 367 0
 287 0002 1368     		ldr	r3, [r2]
 288 0004 5B00     		lsls	r3, r3, #1
 289 0006 5B08     		lsrs	r3, r3, #1
 290 0008 1360     		str	r3, [r2]
 291              		.loc 1 368 0
 292 000a 7047     		bx	lr
 293              	.L20:
 294              		.align	2
 295              	.L19:
 296 000c 00003A40 		.word	1077542912
 297              		.cfi_endproc
 298              	.LFE5:
 299              		.size	ADC_Stop, .-ADC_Stop
 300              		.section	.text.ADC_StartConvert,"ax",%progbits
 301              		.align	1
 302              		.global	ADC_StartConvert
 303              		.code	16
 304              		.thumb_func
 305              		.type	ADC_StartConvert, %function
 306              	ADC_StartConvert:
 307              	.LFB6:
 369:Generated_Source\PSoC4/ADC.c **** 
 370:Generated_Source\PSoC4/ADC.c **** 
 371:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:Generated_Source\PSoC4/ADC.c **** *
 375:Generated_Source\PSoC4/ADC.c **** * Summary:
 376:Generated_Source\PSoC4/ADC.c **** *  Description:
 377:Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:Generated_Source\PSoC4/ADC.c **** *
 380:Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/ADC.c **** *
 384:Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:Generated_Source\PSoC4/ADC.c **** *  None.
 386:Generated_Source\PSoC4/ADC.c **** *
 387:Generated_Source\PSoC4/ADC.c **** * Return:
 388:Generated_Source\PSoC4/ADC.c **** *  None.
 389:Generated_Source\PSoC4/ADC.c **** *
 390:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:Generated_Source\PSoC4/ADC.c **** {
 308              		.loc 1 392 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              		@ link register save eliminated.
 393:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 395:Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 313              		.loc 1 396 0
 314 0000 0122     		movs	r2, #1
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 14


 315 0002 014B     		ldr	r3, .L22
 397:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:Generated_Source\PSoC4/ADC.c **** 
 399:Generated_Source\PSoC4/ADC.c **** }
 316              		.loc 1 399 0
 317              		@ sp needed
 396:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 318              		.loc 1 396 0
 319 0004 1A60     		str	r2, [r3]
 320              		.loc 1 399 0
 321 0006 7047     		bx	lr
 322              	.L23:
 323              		.align	2
 324              	.L22:
 325 0008 24003A40 		.word	1077542948
 326              		.cfi_endproc
 327              	.LFE6:
 328              		.size	ADC_StartConvert, .-ADC_StartConvert
 329              		.section	.text.ADC_StopConvert,"ax",%progbits
 330              		.align	1
 331              		.global	ADC_StopConvert
 332              		.code	16
 333              		.thumb_func
 334              		.type	ADC_StopConvert, %function
 335              	ADC_StopConvert:
 336              	.LFB7:
 400:Generated_Source\PSoC4/ADC.c **** 
 401:Generated_Source\PSoC4/ADC.c **** 
 402:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:Generated_Source\PSoC4/ADC.c **** *
 406:Generated_Source\PSoC4/ADC.c **** * Summary:
 407:Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/ADC.c **** *
 409:Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:Generated_Source\PSoC4/ADC.c **** *  None.
 411:Generated_Source\PSoC4/ADC.c **** *
 412:Generated_Source\PSoC4/ADC.c **** * Return:
 413:Generated_Source\PSoC4/ADC.c **** *  None.
 414:Generated_Source\PSoC4/ADC.c **** *
 415:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:Generated_Source\PSoC4/ADC.c **** {
 337              		.loc 1 417 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341              		@ link register save eliminated.
 418:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 420:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:Generated_Source\PSoC4/ADC.c **** }
 342              		.loc 1 421 0
 343              		@ sp needed
 344 0000 7047     		bx	lr
 345              		.cfi_endproc
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 15


 346              	.LFE7:
 347              		.size	ADC_StopConvert, .-ADC_StopConvert
 348              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 349              		.align	1
 350              		.global	ADC_IsEndConversion
 351              		.code	16
 352              		.thumb_func
 353              		.type	ADC_IsEndConversion, %function
 354              	ADC_IsEndConversion:
 355              	.LFB8:
 422:Generated_Source\PSoC4/ADC.c **** 
 423:Generated_Source\PSoC4/ADC.c **** 
 424:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:Generated_Source\PSoC4/ADC.c **** *
 428:Generated_Source\PSoC4/ADC.c **** * Summary:
 429:Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/ADC.c **** *  completed.
 436:Generated_Source\PSoC4/ADC.c **** *
 437:Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:Generated_Source\PSoC4/ADC.c **** *
 445:Generated_Source\PSoC4/ADC.c **** * Return:
 446:Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/ADC.c **** *
 449:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/ADC.c **** {
 356              		.loc 1 451 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              	.LVL11:
 361 0000 10B5     		push	{r4, lr}
 362              		.cfi_def_cfa_offset 8
 363              		.cfi_offset 4, -8
 364              		.cfi_offset 14, -4
 452:Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 365              		.loc 1 452 0
 366 0002 0023     		movs	r3, #0
 453:Generated_Source\PSoC4/ADC.c **** 
 454:Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 367              		.loc 1 454 0
 368 0004 8207     		lsls	r2, r0, #30
 369 0006 0DD0     		beq	.L30
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 16


 455:Generated_Source\PSoC4/ADC.c ****     {
 456:Generated_Source\PSoC4/ADC.c ****         do
 457:Generated_Source\PSoC4/ADC.c ****         {
 458:Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 370              		.loc 1 458 0 discriminator 2
 371 0008 0124     		movs	r4, #1
 459:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 372              		.loc 1 459 0 discriminator 2
 373 000a 0233     		adds	r3, r3, #2
 458:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 374              		.loc 1 458 0 discriminator 2
 375 000c 0649     		ldr	r1, .L34
 376              		.loc 1 459 0 discriminator 2
 377 000e 1840     		ands	r0, r3
 378              	.LVL12:
 379              	.L31:
 458:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 380              		.loc 1 458 0 discriminator 2
 381 0010 0B68     		ldr	r3, [r1]
 382 0012 0122     		movs	r2, #1
 383 0014 2340     		ands	r3, r4
 384              	.LVL13:
 385              		.loc 1 459 0 discriminator 2
 386 0016 02D1     		bne	.L27
 387              		.loc 1 459 0 is_stmt 0 discriminator 1
 388 0018 0028     		cmp	r0, #0
 389 001a F9D1     		bne	.L31
 390 001c 02E0     		b	.L30
 391              	.L27:
 460:Generated_Source\PSoC4/ADC.c **** 
 461:Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 462:Generated_Source\PSoC4/ADC.c ****         {
 463:Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 392              		.loc 1 464 0 is_stmt 1
 393 001e 024B     		ldr	r3, .L34
 394              	.LVL14:
 395 0020 1A60     		str	r2, [r3]
 396 0022 1300     		movs	r3, r2
 397              	.LVL15:
 398              	.L30:
 465:Generated_Source\PSoC4/ADC.c ****         }
 466:Generated_Source\PSoC4/ADC.c ****     }
 467:Generated_Source\PSoC4/ADC.c **** 
 468:Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/ADC.c ****         {
 471:Generated_Source\PSoC4/ADC.c ****             do
 472:Generated_Source\PSoC4/ADC.c ****             {
 473:Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/ADC.c **** 
 477:Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/ADC.c ****             {
 479:Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 17


 481:Generated_Source\PSoC4/ADC.c ****             }
 482:Generated_Source\PSoC4/ADC.c ****         }
 483:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/ADC.c **** 
 485:Generated_Source\PSoC4/ADC.c ****     return (status);
 486:Generated_Source\PSoC4/ADC.c **** }
 399              		.loc 1 486 0
 400 0024 1800     		movs	r0, r3
 401              		@ sp needed
 402 0026 10BD     		pop	{r4, pc}
 403              	.L35:
 404              		.align	2
 405              	.L34:
 406 0028 10023A40 		.word	1077543440
 407              		.cfi_endproc
 408              	.LFE8:
 409              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 410              		.section	.text.ADC_GetResult16,"ax",%progbits
 411              		.align	1
 412              		.global	ADC_GetResult16
 413              		.code	16
 414              		.thumb_func
 415              		.type	ADC_GetResult16, %function
 416              	ADC_GetResult16:
 417              	.LFB9:
 487:Generated_Source\PSoC4/ADC.c **** 
 488:Generated_Source\PSoC4/ADC.c **** 
 489:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:Generated_Source\PSoC4/ADC.c **** *
 493:Generated_Source\PSoC4/ADC.c **** * Summary:
 494:Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/ADC.c **** *
 496:Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/ADC.c **** *
 500:Generated_Source\PSoC4/ADC.c **** * Return:
 501:Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/ADC.c **** *
 503:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/ADC.c **** {
 418              		.loc 1 505 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422              		@ link register save eliminated.
 423              	.LVL16:
 506:Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:Generated_Source\PSoC4/ADC.c **** 
 508:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 510:Generated_Source\PSoC4/ADC.c **** 
 511:Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 512:Generated_Source\PSoC4/ADC.c ****     {
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 18


 513:Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 514:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:Generated_Source\PSoC4/ADC.c ****     }
 516:Generated_Source\PSoC4/ADC.c ****     else
 517:Generated_Source\PSoC4/ADC.c ****     {
 518:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:Generated_Source\PSoC4/ADC.c ****         #else
 521:Generated_Source\PSoC4/ADC.c ****             result = 0u;
 424              		.loc 1 521 0
 425 0000 0023     		movs	r3, #0
 511:Generated_Source\PSoC4/ADC.c ****     {
 426              		.loc 1 511 0
 427 0002 9842     		cmp	r0, r3
 428 0004 02D1     		bne	.L37
 513:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 429              		.loc 1 513 0
 430 0006 024B     		ldr	r3, .L39
 431 0008 1B68     		ldr	r3, [r3]
 432 000a 9BB2     		uxth	r3, r3
 433              	.LVL17:
 434              	.L37:
 522:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/ADC.c ****     }
 524:Generated_Source\PSoC4/ADC.c **** 
 525:Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 435              		.loc 1 525 0
 436 000c 18B2     		sxth	r0, r3
 437              	.LVL18:
 526:Generated_Source\PSoC4/ADC.c **** }
 438              		.loc 1 526 0
 439              		@ sp needed
 440 000e 7047     		bx	lr
 441              	.L40:
 442              		.align	2
 443              	.L39:
 444 0010 80013A40 		.word	1077543296
 445              		.cfi_endproc
 446              	.LFE9:
 447              		.size	ADC_GetResult16, .-ADC_GetResult16
 448              		.section	.text.ADC_SetChanMask,"ax",%progbits
 449              		.align	1
 450              		.global	ADC_SetChanMask
 451              		.code	16
 452              		.thumb_func
 453              		.type	ADC_SetChanMask, %function
 454              	ADC_SetChanMask:
 455              	.LFB10:
 527:Generated_Source\PSoC4/ADC.c **** 
 528:Generated_Source\PSoC4/ADC.c **** 
 529:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:Generated_Source\PSoC4/ADC.c **** *
 533:Generated_Source\PSoC4/ADC.c **** * Summary:
 534:Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 19


 536:Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/ADC.c **** *
 545:Generated_Source\PSoC4/ADC.c **** * Return:
 546:Generated_Source\PSoC4/ADC.c **** *  None.
 547:Generated_Source\PSoC4/ADC.c **** *
 548:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/ADC.c **** {
 456              		.loc 1 550 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 0
 459              		@ frame_needed = 0, uses_anonymous_args = 0
 460              		@ link register save eliminated.
 461              	.LVL19:
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 462              		.loc 1 551 0
 463 0000 0123     		movs	r3, #1
 464 0002 1840     		ands	r0, r3
 465              	.LVL20:
 466 0004 014B     		ldr	r3, .L42
 552:Generated_Source\PSoC4/ADC.c **** }
 467              		.loc 1 552 0
 468              		@ sp needed
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 469              		.loc 1 551 0
 470 0006 1860     		str	r0, [r3]
 471              		.loc 1 552 0
 472 0008 7047     		bx	lr
 473              	.L43:
 474 000a C046     		.align	2
 475              	.L42:
 476 000c 20003A40 		.word	1077542944
 477              		.cfi_endproc
 478              	.LFE10:
 479              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 480              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 481              		.align	1
 482              		.global	ADC_SetLowLimit
 483              		.code	16
 484              		.thumb_func
 485              		.type	ADC_SetLowLimit, %function
 486              	ADC_SetLowLimit:
 487              	.LFB11:
 553:Generated_Source\PSoC4/ADC.c **** 
 554:Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/ADC.c **** 
 556:Generated_Source\PSoC4/ADC.c **** 
 557:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 20


 560:Generated_Source\PSoC4/ADC.c ****     *
 561:Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/ADC.c ****     *
 564:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:Generated_Source\PSoC4/ADC.c ****     *  None.
 566:Generated_Source\PSoC4/ADC.c ****     *
 567:Generated_Source\PSoC4/ADC.c ****     * Return:
 568:Generated_Source\PSoC4/ADC.c ****     *  None.
 569:Generated_Source\PSoC4/ADC.c ****     *
 570:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:Generated_Source\PSoC4/ADC.c ****     {
 573:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/ADC.c ****     }
 575:Generated_Source\PSoC4/ADC.c **** 
 576:Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/ADC.c **** 
 578:Generated_Source\PSoC4/ADC.c **** 
 579:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:Generated_Source\PSoC4/ADC.c **** *
 583:Generated_Source\PSoC4/ADC.c **** * Summary:
 584:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/ADC.c **** *
 586:Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/ADC.c **** *
 589:Generated_Source\PSoC4/ADC.c **** * Return:
 590:Generated_Source\PSoC4/ADC.c **** *  None.
 591:Generated_Source\PSoC4/ADC.c **** *
 592:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/ADC.c **** {
 488              		.loc 1 594 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492              		@ link register save eliminated.
 493              	.LVL21:
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 494              		.loc 1 595 0
 495 0000 044A     		ldr	r2, .L45
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 496              		.loc 1 596 0
 497 0002 80B2     		uxth	r0, r0
 498              	.LVL22:
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 499              		.loc 1 595 0
 500 0004 1368     		ldr	r3, [r2]
 597:Generated_Source\PSoC4/ADC.c **** }
 501              		.loc 1 597 0
 502              		@ sp needed
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 503              		.loc 1 595 0
 504 0006 1B0C     		lsrs	r3, r3, #16
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 21


 505 0008 1B04     		lsls	r3, r3, #16
 506 000a 1360     		str	r3, [r2]
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 507              		.loc 1 596 0
 508 000c 1368     		ldr	r3, [r2]
 509 000e 1843     		orrs	r0, r3
 510 0010 1060     		str	r0, [r2]
 511              		.loc 1 597 0
 512 0012 7047     		bx	lr
 513              	.L46:
 514              		.align	2
 515              	.L45:
 516 0014 18003A40 		.word	1077542936
 517              		.cfi_endproc
 518              	.LFE11:
 519              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 520              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 521              		.align	1
 522              		.global	ADC_SetHighLimit
 523              		.code	16
 524              		.thumb_func
 525              		.type	ADC_SetHighLimit, %function
 526              	ADC_SetHighLimit:
 527              	.LFB12:
 598:Generated_Source\PSoC4/ADC.c **** 
 599:Generated_Source\PSoC4/ADC.c **** 
 600:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:Generated_Source\PSoC4/ADC.c **** *
 604:Generated_Source\PSoC4/ADC.c **** * Summary:
 605:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/ADC.c **** *
 607:Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/ADC.c **** *
 610:Generated_Source\PSoC4/ADC.c **** * Return:
 611:Generated_Source\PSoC4/ADC.c **** *  None.
 612:Generated_Source\PSoC4/ADC.c **** *
 613:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/ADC.c **** {
 528              		.loc 1 615 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 0, uses_anonymous_args = 0
 532              		@ link register save eliminated.
 533              	.LVL23:
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 534              		.loc 1 616 0
 535 0000 044B     		ldr	r3, .L48
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 536              		.loc 1 617 0
 537 0002 0004     		lsls	r0, r0, #16
 538              	.LVL24:
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 539              		.loc 1 616 0
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 22


 540 0004 1A68     		ldr	r2, [r3]
 618:Generated_Source\PSoC4/ADC.c **** }
 541              		.loc 1 618 0
 542              		@ sp needed
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 543              		.loc 1 616 0
 544 0006 92B2     		uxth	r2, r2
 545 0008 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 546              		.loc 1 617 0
 547 000a 1A68     		ldr	r2, [r3]
 548 000c 1043     		orrs	r0, r2
 549 000e 1860     		str	r0, [r3]
 550              		.loc 1 618 0
 551 0010 7047     		bx	lr
 552              	.L49:
 553 0012 C046     		.align	2
 554              	.L48:
 555 0014 18003A40 		.word	1077542936
 556              		.cfi_endproc
 557              	.LFE12:
 558              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 559              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 560              		.align	1
 561              		.global	ADC_SetLimitMask
 562              		.code	16
 563              		.thumb_func
 564              		.type	ADC_SetLimitMask, %function
 565              	ADC_SetLimitMask:
 566              	.LFB13:
 619:Generated_Source\PSoC4/ADC.c **** 
 620:Generated_Source\PSoC4/ADC.c **** 
 621:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC.c **** *
 625:Generated_Source\PSoC4/ADC.c **** * Summary:
 626:Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/ADC.c **** *
 628:Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/ADC.c **** *
 634:Generated_Source\PSoC4/ADC.c **** * Return:
 635:Generated_Source\PSoC4/ADC.c **** *  None.
 636:Generated_Source\PSoC4/ADC.c **** *
 637:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/ADC.c **** {
 567              		.loc 1 639 0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 572              	.LVL25:
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 23


 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 573              		.loc 1 640 0
 574 0000 0123     		movs	r3, #1
 575 0002 1840     		ands	r0, r3
 576              	.LVL26:
 577 0004 014B     		ldr	r3, .L51
 641:Generated_Source\PSoC4/ADC.c **** }
 578              		.loc 1 641 0
 579              		@ sp needed
 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 580              		.loc 1 640 0
 581 0006 1860     		str	r0, [r3]
 582              		.loc 1 641 0
 583 0008 7047     		bx	lr
 584              	.L52:
 585 000a C046     		.align	2
 586              	.L51:
 587 000c 38023A40 		.word	1077543480
 588              		.cfi_endproc
 589              	.LFE13:
 590              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 591              		.section	.text.ADC_SetSatMask,"ax",%progbits
 592              		.align	1
 593              		.global	ADC_SetSatMask
 594              		.code	16
 595              		.thumb_func
 596              		.type	ADC_SetSatMask, %function
 597              	ADC_SetSatMask:
 598              	.LFB14:
 642:Generated_Source\PSoC4/ADC.c **** 
 643:Generated_Source\PSoC4/ADC.c **** 
 644:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:Generated_Source\PSoC4/ADC.c **** *
 648:Generated_Source\PSoC4/ADC.c **** * Summary:
 649:Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/ADC.c **** *
 651:Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/ADC.c **** *
 657:Generated_Source\PSoC4/ADC.c **** * Return:
 658:Generated_Source\PSoC4/ADC.c **** *  None.
 659:Generated_Source\PSoC4/ADC.c **** *
 660:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/ADC.c **** {
 599              		.loc 1 662 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603              		@ link register save eliminated.
 604              	.LVL27:
 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 24


 605              		.loc 1 663 0
 606 0000 0123     		movs	r3, #1
 607 0002 1840     		ands	r0, r3
 608              	.LVL28:
 609 0004 014B     		ldr	r3, .L54
 664:Generated_Source\PSoC4/ADC.c **** }
 610              		.loc 1 664 0
 611              		@ sp needed
 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 612              		.loc 1 663 0
 613 0006 1860     		str	r0, [r3]
 614              		.loc 1 664 0
 615 0008 7047     		bx	lr
 616              	.L55:
 617 000a C046     		.align	2
 618              	.L54:
 619 000c 28023A40 		.word	1077543464
 620              		.cfi_endproc
 621              	.LFE14:
 622              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 623              		.section	.text.ADC_SetOffset,"ax",%progbits
 624              		.align	1
 625              		.global	ADC_SetOffset
 626              		.code	16
 627              		.thumb_func
 628              		.type	ADC_SetOffset, %function
 629              	ADC_SetOffset:
 630              	.LFB15:
 665:Generated_Source\PSoC4/ADC.c **** 
 666:Generated_Source\PSoC4/ADC.c **** 
 667:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:Generated_Source\PSoC4/ADC.c **** *
 671:Generated_Source\PSoC4/ADC.c **** * Summary:
 672:Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/ADC.c **** *
 677:Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/ADC.c **** *
 682:Generated_Source\PSoC4/ADC.c **** * Return:
 683:Generated_Source\PSoC4/ADC.c **** *  None.
 684:Generated_Source\PSoC4/ADC.c **** *
 685:Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/ADC.c **** *
 688:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/ADC.c **** {
 631              		.loc 1 690 0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 25


 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 636              	.LVL29:
 691:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 693:Generated_Source\PSoC4/ADC.c **** 
 694:Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 637              		.loc 1 694 0
 638 0000 014B     		ldr	r3, .L57
 639 0002 4000     		lsls	r0, r0, #1
 640              	.LVL30:
 641 0004 C152     		strh	r1, [r0, r3]
 695:Generated_Source\PSoC4/ADC.c **** }
 642              		.loc 1 695 0
 643              		@ sp needed
 644 0006 7047     		bx	lr
 645              	.L58:
 646              		.align	2
 647              	.L57:
 648 0008 00000000 		.word	ADC_offset
 649              		.cfi_endproc
 650              	.LFE15:
 651              		.size	ADC_SetOffset, .-ADC_SetOffset
 652              		.section	.text.ADC_SetGain,"ax",%progbits
 653              		.align	1
 654              		.global	ADC_SetGain
 655              		.code	16
 656              		.thumb_func
 657              		.type	ADC_SetGain, %function
 658              	ADC_SetGain:
 659              	.LFB16:
 696:Generated_Source\PSoC4/ADC.c **** 
 697:Generated_Source\PSoC4/ADC.c **** 
 698:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:Generated_Source\PSoC4/ADC.c **** *
 702:Generated_Source\PSoC4/ADC.c **** * Summary:
 703:Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/ADC.c **** *
 711:Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/ADC.c **** *
 715:Generated_Source\PSoC4/ADC.c **** * Return:
 716:Generated_Source\PSoC4/ADC.c **** *  None.
 717:Generated_Source\PSoC4/ADC.c **** *
 718:Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 26


 722:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/ADC.c **** {
 660              		.loc 1 724 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 0
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 664              		@ link register save eliminated.
 665              	.LVL31:
 725:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 727:Generated_Source\PSoC4/ADC.c **** 
 728:Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 666              		.loc 1 728 0
 667 0000 014B     		ldr	r3, .L60
 668 0002 8000     		lsls	r0, r0, #2
 669              	.LVL32:
 670 0004 C150     		str	r1, [r0, r3]
 729:Generated_Source\PSoC4/ADC.c **** }
 671              		.loc 1 729 0
 672              		@ sp needed
 673 0006 7047     		bx	lr
 674              	.L61:
 675              		.align	2
 676              	.L60:
 677 0008 00000000 		.word	ADC_countsPer10Volt
 678              		.cfi_endproc
 679              	.LFE16:
 680              		.size	ADC_SetGain, .-ADC_SetGain
 681              		.global	__aeabi_idiv
 682              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 683              		.align	1
 684              		.global	ADC_CountsTo_mVolts
 685              		.code	16
 686              		.thumb_func
 687              		.type	ADC_CountsTo_mVolts, %function
 688              	ADC_CountsTo_mVolts:
 689              	.LFB17:
 730:Generated_Source\PSoC4/ADC.c **** 
 731:Generated_Source\PSoC4/ADC.c **** 
 732:Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:Generated_Source\PSoC4/ADC.c **** 
 734:Generated_Source\PSoC4/ADC.c **** 
 735:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/ADC.c ****     *
 739:Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/ADC.c ****     *
 743:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/ADC.c ****     *
 747:Generated_Source\PSoC4/ADC.c ****     * Return:
 748:Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 27


 749:Generated_Source\PSoC4/ADC.c ****     *
 750:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/ADC.c ****     *
 755:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/ADC.c ****     {
 690              		.loc 1 757 0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 0
 693              		@ frame_needed = 0, uses_anonymous_args = 0
 694              	.LVL33:
 695 0000 70B5     		push	{r4, r5, r6, lr}
 696              		.cfi_def_cfa_offset 16
 697              		.cfi_offset 4, -16
 698              		.cfi_offset 5, -12
 699              		.cfi_offset 6, -8
 700              		.cfi_offset 14, -4
 758:Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/ADC.c **** 
 760:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 762:Generated_Source\PSoC4/ADC.c **** 
 763:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/ADC.c ****             {
 767:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/ADC.c ****             }
 769:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:Generated_Source\PSoC4/ADC.c **** 
 771:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 701              		.loc 1 772 0
 702 0002 0B4B     		ldr	r3, .L65
 703 0004 0B4E     		ldr	r6, .L65+4
 704 0006 4200     		lsls	r2, r0, #1
 705 0008 8400     		lsls	r4, r0, #2
 706 000a D35A     		ldrh	r3, [r2, r3]
 773:Generated_Source\PSoC4/ADC.c **** 
 774:Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 775:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 707              		.loc 1 775 0
 708 000c 3259     		ldr	r2, [r6, r4]
 772:Generated_Source\PSoC4/ADC.c **** 
 709              		.loc 1 772 0
 710 000e C91A     		subs	r1, r1, r3
 711              	.LVL34:
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 712              		.loc 1 774 0
 713 0010 094D     		ldr	r5, .L65+8
 714              		.loc 1 775 0
 715 0012 D30F     		lsrs	r3, r2, #31
 772:Generated_Source\PSoC4/ADC.c **** 
 716              		.loc 1 772 0
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 28


 717 0014 09B2     		sxth	r1, r1
 718              	.LVL35:
 719              		.loc 1 775 0
 720 0016 9A18     		adds	r2, r3, r2
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 721              		.loc 1 774 0
 722 0018 4D43     		muls	r5, r1
 723              		.loc 1 775 0
 724 001a 5310     		asrs	r3, r2, #1
 725 001c 0029     		cmp	r1, #0
 726 001e 01DC     		bgt	.L64
 727              		.loc 1 775 0 is_stmt 0 discriminator 2
 728 0020 5210     		asrs	r2, r2, #1
 729 0022 5342     		rsbs	r3, r2, #0
 730              	.L64:
 776:Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 731              		.loc 1 776 0 is_stmt 1
 732 0024 3159     		ldr	r1, [r6, r4]
 733              	.LVL36:
 777:Generated_Source\PSoC4/ADC.c **** 
 778:Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 734              		.loc 1 778 0
 735 0026 5819     		adds	r0, r3, r5
 736              	.LVL37:
 737 0028 FFF7FEFF 		bl	__aeabi_idiv
 738              	.LVL38:
 779:Generated_Source\PSoC4/ADC.c ****     }
 739              		.loc 1 779 0
 740              		@ sp needed
 778:Generated_Source\PSoC4/ADC.c ****     }
 741              		.loc 1 778 0
 742 002c 00B2     		sxth	r0, r0
 743              		.loc 1 779 0
 744 002e 70BD     		pop	{r4, r5, r6, pc}
 745              	.L66:
 746              		.align	2
 747              	.L65:
 748 0030 00000000 		.word	ADC_offset
 749 0034 00000000 		.word	ADC_countsPer10Volt
 750 0038 10270000 		.word	10000
 751              		.cfi_endproc
 752              	.LFE17:
 753              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 754              		.global	__aeabi_lmul
 755              		.global	__aeabi_ldivmod
 756              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 757              		.align	1
 758              		.global	ADC_CountsTo_uVolts
 759              		.code	16
 760              		.thumb_func
 761              		.type	ADC_CountsTo_uVolts, %function
 762              	ADC_CountsTo_uVolts:
 763              	.LFB18:
 780:Generated_Source\PSoC4/ADC.c **** 
 781:Generated_Source\PSoC4/ADC.c **** 
 782:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 29


 784:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/ADC.c ****     *
 786:Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/ADC.c ****     *
 790:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/ADC.c ****     *
 794:Generated_Source\PSoC4/ADC.c ****     * Return:
 795:Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/ADC.c ****     *
 797:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/ADC.c ****     *
 802:Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/ADC.c ****     *
 809:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/ADC.c ****     {
 764              		.loc 1 811 0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 0
 767              		@ frame_needed = 0, uses_anonymous_args = 0
 768              	.LVL39:
 812:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/ADC.c **** 
 814:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 816:Generated_Source\PSoC4/ADC.c **** 
 817:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/ADC.c ****             {
 821:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/ADC.c ****             }
 823:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:Generated_Source\PSoC4/ADC.c **** 
 825:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 769              		.loc 1 826 0
 770 0000 094B     		ldr	r3, .L68
 771 0002 4200     		lsls	r2, r0, #1
 772 0004 D35A     		ldrh	r3, [r2, r3]
 811:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 773              		.loc 1 811 0
 774 0006 10B5     		push	{r4, lr}
 775              		.cfi_def_cfa_offset 8
 776              		.cfi_offset 4, -8
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 30


 777              		.cfi_offset 14, -4
 778              		.loc 1 826 0
 779 0008 C91A     		subs	r1, r1, r3
 780              	.LVL40:
 827:Generated_Source\PSoC4/ADC.c **** 
 828:Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 781              		.loc 1 828 0
 782 000a 084B     		ldr	r3, .L68+4
 783 000c 8000     		lsls	r0, r0, #2
 784              	.LVL41:
 785 000e C458     		ldr	r4, [r0, r3]
 786              	.LVL42:
 829:Generated_Source\PSoC4/ADC.c **** 
 830:Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 787              		.loc 1 830 0
 788 0010 08B2     		sxth	r0, r1
 789 0012 074A     		ldr	r2, .L68+8
 790 0014 0023     		movs	r3, #0
 791 0016 C117     		asrs	r1, r0, #31
 792              	.LVL43:
 793 0018 FFF7FEFF 		bl	__aeabi_lmul
 794              	.LVL44:
 795 001c E317     		asrs	r3, r4, #31
 796 001e 2200     		movs	r2, r4
 797 0020 FFF7FEFF 		bl	__aeabi_ldivmod
 798              	.LVL45:
 831:Generated_Source\PSoC4/ADC.c ****     }
 799              		.loc 1 831 0
 800              		@ sp needed
 801 0024 10BD     		pop	{r4, pc}
 802              	.L69:
 803 0026 C046     		.align	2
 804              	.L68:
 805 0028 00000000 		.word	ADC_offset
 806 002c 00000000 		.word	ADC_countsPer10Volt
 807 0030 80969800 		.word	10000000
 808              		.cfi_endproc
 809              	.LFE18:
 810              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 811              		.global	__aeabi_i2f
 812              		.global	__aeabi_fmul
 813              		.global	__aeabi_fdiv
 814              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 815              		.align	1
 816              		.global	ADC_CountsTo_Volts
 817              		.code	16
 818              		.thumb_func
 819              		.type	ADC_CountsTo_Volts, %function
 820              	ADC_CountsTo_Volts:
 821              	.LFB19:
 832:Generated_Source\PSoC4/ADC.c **** 
 833:Generated_Source\PSoC4/ADC.c **** 
 834:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/ADC.c ****     *
 838:Generated_Source\PSoC4/ADC.c ****     * Summary:
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 31


 839:Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/ADC.c ****     *
 842:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/ADC.c ****     *
 846:Generated_Source\PSoC4/ADC.c ****     * Return:
 847:Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/ADC.c ****     *
 849:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/ADC.c ****     *
 854:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/ADC.c ****     {
 822              		.loc 1 856 0
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 0
 825              		@ frame_needed = 0, uses_anonymous_args = 0
 826              	.LVL46:
 857:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:Generated_Source\PSoC4/ADC.c **** 
 859:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 861:Generated_Source\PSoC4/ADC.c **** 
 862:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/ADC.c ****             {
 866:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/ADC.c ****             }
 868:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:Generated_Source\PSoC4/ADC.c **** 
 870:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 827              		.loc 1 871 0
 828 0000 0B4B     		ldr	r3, .L71
 829 0002 4200     		lsls	r2, r0, #1
 830 0004 D35A     		ldrh	r3, [r2, r3]
 872:Generated_Source\PSoC4/ADC.c **** 
 873:Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 831              		.loc 1 873 0
 832 0006 8000     		lsls	r0, r0, #2
 833              	.LVL47:
 871:Generated_Source\PSoC4/ADC.c **** 
 834              		.loc 1 871 0
 835 0008 C91A     		subs	r1, r1, r3
 836              	.LVL48:
 837              		.loc 1 873 0
 838 000a 0A4B     		ldr	r3, .L71+4
 856:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 839              		.loc 1 856 0
 840 000c 70B5     		push	{r4, r5, r6, lr}
 841              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 32


 842              		.cfi_offset 4, -16
 843              		.cfi_offset 5, -12
 844              		.cfi_offset 6, -8
 845              		.cfi_offset 14, -4
 846              		.loc 1 873 0
 847 000e C558     		ldr	r5, [r0, r3]
 848              	.LVL49:
 874:Generated_Source\PSoC4/ADC.c **** 
 875:Generated_Source\PSoC4/ADC.c ****         return( volts );
 849              		.loc 1 875 0
 850 0010 08B2     		sxth	r0, r1
 851 0012 FFF7FEFF 		bl	__aeabi_i2f
 852              	.LVL50:
 853 0016 0849     		ldr	r1, .L71+8
 854 0018 FFF7FEFF 		bl	__aeabi_fmul
 855              	.LVL51:
 856 001c 041C     		adds	r4, r0, #0
 857 001e 2800     		movs	r0, r5
 858 0020 FFF7FEFF 		bl	__aeabi_i2f
 859              	.LVL52:
 860 0024 011C     		adds	r1, r0, #0
 861 0026 201C     		adds	r0, r4, #0
 862 0028 FFF7FEFF 		bl	__aeabi_fdiv
 863              	.LVL53:
 876:Generated_Source\PSoC4/ADC.c ****     }
 864              		.loc 1 876 0
 865              		@ sp needed
 866 002c 70BD     		pop	{r4, r5, r6, pc}
 867              	.L72:
 868 002e C046     		.align	2
 869              	.L71:
 870 0030 00000000 		.word	ADC_offset
 871 0034 00000000 		.word	ADC_countsPer10Volt
 872 0038 00002041 		.word	1092616192
 873              		.cfi_endproc
 874              	.LFE19:
 875              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 876              		.comm	ADC_countsPer10Volt,4,4
 877              		.comm	ADC_offset,2,2
 878              		.global	ADC_initVar
 879              		.bss
 880              		.set	.LANCHOR0,. + 0
 881              		.type	ADC_initVar, %object
 882              		.size	ADC_initVar, 1
 883              	ADC_initVar:
 884 0000 00       		.space	1
 885              		.text
 886              	.Letext0:
 887              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 888              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 889              		.section	.debug_info,"",%progbits
 890              	.Ldebug_info0:
 891 0000 16050000 		.4byte	0x516
 892 0004 0400     		.2byte	0x4
 893 0006 00000000 		.4byte	.Ldebug_abbrev0
 894 000a 04       		.byte	0x4
 895 000b 01       		.uleb128 0x1
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 33


 896 000c 03020000 		.4byte	.LASF62
 897 0010 0C       		.byte	0xc
 898 0011 DB020000 		.4byte	.LASF63
 899 0015 2A010000 		.4byte	.LASF64
 900 0019 00000000 		.4byte	.Ldebug_ranges0+0
 901 001d 00000000 		.4byte	0
 902 0021 00000000 		.4byte	.Ldebug_line0
 903 0025 02       		.uleb128 0x2
 904 0026 08       		.byte	0x8
 905 0027 07       		.byte	0x7
 906 0028 32000000 		.4byte	.LASF0
 907 002c 02       		.uleb128 0x2
 908 002d 08       		.byte	0x8
 909 002e 05       		.byte	0x5
 910 002f 5A000000 		.4byte	.LASF1
 911 0033 03       		.uleb128 0x3
 912 0034 04       		.byte	0x4
 913 0035 05       		.byte	0x5
 914 0036 696E7400 		.ascii	"int\000"
 915 003a 02       		.uleb128 0x2
 916 003b 04       		.byte	0x4
 917 003c 04       		.byte	0x4
 918 003d 04030000 		.4byte	.LASF2
 919 0041 02       		.uleb128 0x2
 920 0042 02       		.byte	0x2
 921 0043 05       		.byte	0x5
 922 0044 51030000 		.4byte	.LASF3
 923 0048 02       		.uleb128 0x2
 924 0049 01       		.byte	0x1
 925 004a 06       		.byte	0x6
 926 004b 68000000 		.4byte	.LASF4
 927 004f 02       		.uleb128 0x2
 928 0050 01       		.byte	0x1
 929 0051 08       		.byte	0x8
 930 0052 38030000 		.4byte	.LASF5
 931 0056 02       		.uleb128 0x2
 932 0057 02       		.byte	0x2
 933 0058 07       		.byte	0x7
 934 0059 8D010000 		.4byte	.LASF6
 935 005d 02       		.uleb128 0x2
 936 005e 04       		.byte	0x4
 937 005f 05       		.byte	0x5
 938 0060 8B000000 		.4byte	.LASF7
 939 0064 02       		.uleb128 0x2
 940 0065 04       		.byte	0x4
 941 0066 07       		.byte	0x7
 942 0067 18010000 		.4byte	.LASF8
 943 006b 02       		.uleb128 0x2
 944 006c 04       		.byte	0x4
 945 006d 07       		.byte	0x7
 946 006e 04010000 		.4byte	.LASF9
 947 0072 04       		.uleb128 0x4
 948 0073 BC000000 		.4byte	.LASF10
 949 0077 02       		.byte	0x2
 950 0078 D201     		.2byte	0x1d2
 951 007a 4F000000 		.4byte	0x4f
 952 007e 04       		.uleb128 0x4
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 34


 953 007f 00000000 		.4byte	.LASF11
 954 0083 02       		.byte	0x2
 955 0084 D301     		.2byte	0x1d3
 956 0086 56000000 		.4byte	0x56
 957 008a 04       		.uleb128 0x4
 958 008b D3000000 		.4byte	.LASF12
 959 008f 02       		.byte	0x2
 960 0090 D401     		.2byte	0x1d4
 961 0092 64000000 		.4byte	0x64
 962 0096 04       		.uleb128 0x4
 963 0097 A3030000 		.4byte	.LASF13
 964 009b 02       		.byte	0x2
 965 009c D601     		.2byte	0x1d6
 966 009e 41000000 		.4byte	0x41
 967 00a2 04       		.uleb128 0x4
 968 00a3 7B000000 		.4byte	.LASF14
 969 00a7 02       		.byte	0x2
 970 00a8 D701     		.2byte	0x1d7
 971 00aa 5D000000 		.4byte	0x5d
 972 00ae 04       		.uleb128 0x4
 973 00af CC010000 		.4byte	.LASF15
 974 00b3 02       		.byte	0x2
 975 00b4 D801     		.2byte	0x1d8
 976 00b6 3A000000 		.4byte	0x3a
 977 00ba 02       		.uleb128 0x2
 978 00bb 08       		.byte	0x8
 979 00bc 04       		.byte	0x4
 980 00bd CC000000 		.4byte	.LASF16
 981 00c1 04       		.uleb128 0x4
 982 00c2 B4020000 		.4byte	.LASF17
 983 00c6 02       		.byte	0x2
 984 00c7 DD01     		.2byte	0x1dd
 985 00c9 2C000000 		.4byte	0x2c
 986 00cd 02       		.uleb128 0x2
 987 00ce 01       		.byte	0x1
 988 00cf 08       		.byte	0x8
 989 00d0 6F030000 		.4byte	.LASF18
 990 00d4 04       		.uleb128 0x4
 991 00d5 C6010000 		.4byte	.LASF19
 992 00d9 02       		.byte	0x2
 993 00da 7E02     		.2byte	0x27e
 994 00dc E0000000 		.4byte	0xe0
 995 00e0 05       		.uleb128 0x5
 996 00e1 8A000000 		.4byte	0x8a
 997 00e5 02       		.uleb128 0x2
 998 00e6 08       		.byte	0x8
 999 00e7 04       		.byte	0x4
 1000 00e8 E6010000 		.4byte	.LASF20
 1001 00ec 02       		.uleb128 0x2
 1002 00ed 04       		.byte	0x4
 1003 00ee 07       		.byte	0x7
 1004 00ef D4010000 		.4byte	.LASF21
 1005 00f3 06       		.uleb128 0x6
 1006 00f4 98030000 		.4byte	.LASF65
 1007 00f8 01       		.byte	0x1
 1008 00f9 4A01     		.2byte	0x14a
 1009 00fb 01       		.byte	0x1
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 35


 1010 00fc 07       		.uleb128 0x7
 1011 00fd 29000000 		.4byte	.LASF25
 1012 0101 01       		.byte	0x1
 1013 0102 5E       		.byte	0x5e
 1014 0103 00000000 		.4byte	.LFB3
 1015 0107 E8000000 		.4byte	.LFE3-.LFB3
 1016 010b 01       		.uleb128 0x1
 1017 010c 9C       		.byte	0x9c
 1018 010d 64010000 		.4byte	0x164
 1019 0111 08       		.uleb128 0x8
 1020 0112 64030000 		.4byte	.LASF22
 1021 0116 01       		.byte	0x1
 1022 0117 60       		.byte	0x60
 1023 0118 8A000000 		.4byte	0x8a
 1024 011c 00000000 		.4byte	.LLST0
 1025 0120 08       		.uleb128 0x8
 1026 0121 83010000 		.4byte	.LASF23
 1027 0125 01       		.byte	0x1
 1028 0126 61       		.byte	0x61
 1029 0127 8A000000 		.4byte	0x8a
 1030 012b 20000000 		.4byte	.LLST1
 1031 012f 09       		.uleb128 0x9
 1032 0130 0F000000 		.4byte	.LASF24
 1033 0134 01       		.byte	0x1
 1034 0135 62       		.byte	0x62
 1035 0136 A2000000 		.4byte	0xa2
 1036 013a 0010     		.2byte	0x1000
 1037 013c 0A       		.uleb128 0xa
 1038 013d 0A000000 		.4byte	.LVL0
 1039 0141 F8040000 		.4byte	0x4f8
 1040 0145 54010000 		.4byte	0x154
 1041 0149 0B       		.uleb128 0xb
 1042 014a 01       		.uleb128 0x1
 1043 014b 50       		.byte	0x50
 1044 014c 01       		.uleb128 0x1
 1045 014d 3F       		.byte	0x3f
 1046 014e 0B       		.uleb128 0xb
 1047 014f 01       		.uleb128 0x1
 1048 0150 51       		.byte	0x51
 1049 0151 01       		.uleb128 0x1
 1050 0152 33       		.byte	0x33
 1051 0153 00       		.byte	0
 1052 0154 0C       		.uleb128 0xc
 1053 0155 12000000 		.4byte	.LVL1
 1054 0159 03050000 		.4byte	0x503
 1055 015d 0B       		.uleb128 0xb
 1056 015e 01       		.uleb128 0x1
 1057 015f 50       		.byte	0x50
 1058 0160 01       		.uleb128 0x1
 1059 0161 3F       		.byte	0x3f
 1060 0162 00       		.byte	0
 1061 0163 00       		.byte	0
 1062 0164 0D       		.uleb128 0xd
 1063 0165 F3000000 		.4byte	0xf3
 1064 0169 00000000 		.4byte	.LFB4
 1065 016d 2C000000 		.4byte	.LFE4-.LFB4
 1066 0171 01       		.uleb128 0x1
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 36


 1067 0172 9C       		.byte	0x9c
 1068 0173 87010000 		.4byte	0x187
 1069 0177 0C       		.uleb128 0xc
 1070 0178 22000000 		.4byte	.LVL8
 1071 017c 0E050000 		.4byte	0x50e
 1072 0180 0B       		.uleb128 0xb
 1073 0181 01       		.uleb128 0x1
 1074 0182 50       		.byte	0x50
 1075 0183 01       		.uleb128 0x1
 1076 0184 3A       		.byte	0x3a
 1077 0185 00       		.byte	0
 1078 0186 00       		.byte	0
 1079 0187 07       		.uleb128 0x7
 1080 0188 81000000 		.4byte	.LASF26
 1081 018c 01       		.byte	0x1
 1082 018d 3F       		.byte	0x3f
 1083 018e 00000000 		.4byte	.LFB2
 1084 0192 1C000000 		.4byte	.LFE2-.LFB2
 1085 0196 01       		.uleb128 0x1
 1086 0197 9C       		.byte	0x9c
 1087 0198 AF010000 		.4byte	0x1af
 1088 019c 0E       		.uleb128 0xe
 1089 019d 0E000000 		.4byte	.LVL9
 1090 01a1 FC000000 		.4byte	0xfc
 1091 01a5 0E       		.uleb128 0xe
 1092 01a6 16000000 		.4byte	.LVL10
 1093 01aa F3000000 		.4byte	0xf3
 1094 01ae 00       		.byte	0
 1095 01af 0F       		.uleb128 0xf
 1096 01b0 5B030000 		.4byte	.LASF27
 1097 01b4 01       		.byte	0x1
 1098 01b5 6D01     		.2byte	0x16d
 1099 01b7 00000000 		.4byte	.LFB5
 1100 01bb 10000000 		.4byte	.LFE5-.LFB5
 1101 01bf 01       		.uleb128 0x1
 1102 01c0 9C       		.byte	0x9c
 1103 01c1 0F       		.uleb128 0xf
 1104 01c2 49000000 		.4byte	.LASF28
 1105 01c6 01       		.byte	0x1
 1106 01c7 8701     		.2byte	0x187
 1107 01c9 00000000 		.4byte	.LFB6
 1108 01cd 0C000000 		.4byte	.LFE6-.LFB6
 1109 01d1 01       		.uleb128 0x1
 1110 01d2 9C       		.byte	0x9c
 1111 01d3 0F       		.uleb128 0xf
 1112 01d4 AF010000 		.4byte	.LASF29
 1113 01d8 01       		.byte	0x1
 1114 01d9 A001     		.2byte	0x1a0
 1115 01db 00000000 		.4byte	.LFB7
 1116 01df 02000000 		.4byte	.LFE7-.LFB7
 1117 01e3 01       		.uleb128 0x1
 1118 01e4 9C       		.byte	0x9c
 1119 01e5 10       		.uleb128 0x10
 1120 01e6 A0020000 		.4byte	.LASF31
 1121 01ea 01       		.byte	0x1
 1122 01eb C201     		.2byte	0x1c2
 1123 01ed 8A000000 		.4byte	0x8a
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 37


 1124 01f1 00000000 		.4byte	.LFB8
 1125 01f5 2C000000 		.4byte	.LFE8-.LFB8
 1126 01f9 01       		.uleb128 0x1
 1127 01fa 9C       		.byte	0x9c
 1128 01fb 20020000 		.4byte	0x220
 1129 01ff 11       		.uleb128 0x11
 1130 0200 EB000000 		.4byte	.LASF33
 1131 0204 01       		.byte	0x1
 1132 0205 C201     		.2byte	0x1c2
 1133 0207 8A000000 		.4byte	0x8a
 1134 020b 52000000 		.4byte	.LLST2
 1135 020f 12       		.uleb128 0x12
 1136 0210 74000000 		.4byte	.LASF30
 1137 0214 01       		.byte	0x1
 1138 0215 C401     		.2byte	0x1c4
 1139 0217 8A000000 		.4byte	0x8a
 1140 021b 73000000 		.4byte	.LLST3
 1141 021f 00       		.byte	0
 1142 0220 10       		.uleb128 0x10
 1143 0221 BE030000 		.4byte	.LASF32
 1144 0225 01       		.byte	0x1
 1145 0226 F801     		.2byte	0x1f8
 1146 0228 96000000 		.4byte	0x96
 1147 022c 00000000 		.4byte	.LFB9
 1148 0230 14000000 		.4byte	.LFE9-.LFB9
 1149 0234 01       		.uleb128 0x1
 1150 0235 9C       		.byte	0x9c
 1151 0236 59020000 		.4byte	0x259
 1152 023a 11       		.uleb128 0x11
 1153 023b 6A030000 		.4byte	.LASF34
 1154 023f 01       		.byte	0x1
 1155 0240 F801     		.2byte	0x1f8
 1156 0242 8A000000 		.4byte	0x8a
 1157 0246 92000000 		.4byte	.LLST4
 1158 024a 13       		.uleb128 0x13
 1159 024b B7030000 		.4byte	.LASF35
 1160 024f 01       		.byte	0x1
 1161 0250 FA01     		.2byte	0x1fa
 1162 0252 8A000000 		.4byte	0x8a
 1163 0256 01       		.uleb128 0x1
 1164 0257 53       		.byte	0x53
 1165 0258 00       		.byte	0
 1166 0259 14       		.uleb128 0x14
 1167 025a CB020000 		.4byte	.LASF36
 1168 025e 01       		.byte	0x1
 1169 025f 2502     		.2byte	0x225
 1170 0261 00000000 		.4byte	.LFB10
 1171 0265 10000000 		.4byte	.LFE10-.LFB10
 1172 0269 01       		.uleb128 0x1
 1173 026a 9C       		.byte	0x9c
 1174 026b 80020000 		.4byte	0x280
 1175 026f 11       		.uleb128 0x11
 1176 0270 DA000000 		.4byte	.LASF37
 1177 0274 01       		.byte	0x1
 1178 0275 2502     		.2byte	0x225
 1179 0277 8A000000 		.4byte	0x8a
 1180 027b B3000000 		.4byte	.LLST5
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 38


 1181 027f 00       		.byte	0
 1182 0280 14       		.uleb128 0x14
 1183 0281 28030000 		.4byte	.LASF38
 1184 0285 01       		.byte	0x1
 1185 0286 5102     		.2byte	0x251
 1186 0288 00000000 		.4byte	.LFB11
 1187 028c 18000000 		.4byte	.LFE11-.LFB11
 1188 0290 01       		.uleb128 0x1
 1189 0291 9C       		.byte	0x9c
 1190 0292 A7020000 		.4byte	0x2a7
 1191 0296 11       		.uleb128 0x11
 1192 0297 DD010000 		.4byte	.LASF39
 1193 029b 01       		.byte	0x1
 1194 029c 5102     		.2byte	0x251
 1195 029e 8A000000 		.4byte	0x8a
 1196 02a2 D4000000 		.4byte	.LLST6
 1197 02a6 00       		.byte	0
 1198 02a7 14       		.uleb128 0x14
 1199 02a8 F2010000 		.4byte	.LASF40
 1200 02ac 01       		.byte	0x1
 1201 02ad 6602     		.2byte	0x266
 1202 02af 00000000 		.4byte	.LFB12
 1203 02b3 18000000 		.4byte	.LFE12-.LFB12
 1204 02b7 01       		.uleb128 0x1
 1205 02b8 9C       		.byte	0x9c
 1206 02b9 CE020000 		.4byte	0x2ce
 1207 02bd 11       		.uleb128 0x11
 1208 02be 0A030000 		.4byte	.LASF41
 1209 02c2 01       		.byte	0x1
 1210 02c3 6602     		.2byte	0x266
 1211 02c5 8A000000 		.4byte	0x8a
 1212 02c9 F5000000 		.4byte	.LLST7
 1213 02cd 00       		.byte	0
 1214 02ce 14       		.uleb128 0x14
 1215 02cf F3000000 		.4byte	.LASF42
 1216 02d3 01       		.byte	0x1
 1217 02d4 7E02     		.2byte	0x27e
 1218 02d6 00000000 		.4byte	.LFB13
 1219 02da 10000000 		.4byte	.LFE13-.LFB13
 1220 02de 01       		.uleb128 0x1
 1221 02df 9C       		.byte	0x9c
 1222 02e0 F5020000 		.4byte	0x2f5
 1223 02e4 11       		.uleb128 0x11
 1224 02e5 DA000000 		.4byte	.LASF37
 1225 02e9 01       		.byte	0x1
 1226 02ea 7E02     		.2byte	0x27e
 1227 02ec 8A000000 		.4byte	0x8a
 1228 02f0 16010000 		.4byte	.LLST8
 1229 02f4 00       		.byte	0
 1230 02f5 14       		.uleb128 0x14
 1231 02f6 91020000 		.4byte	.LASF43
 1232 02fa 01       		.byte	0x1
 1233 02fb 9502     		.2byte	0x295
 1234 02fd 00000000 		.4byte	.LFB14
 1235 0301 10000000 		.4byte	.LFE14-.LFB14
 1236 0305 01       		.uleb128 0x1
 1237 0306 9C       		.byte	0x9c
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 39


 1238 0307 1C030000 		.4byte	0x31c
 1239 030b 11       		.uleb128 0x11
 1240 030c DA000000 		.4byte	.LASF37
 1241 0310 01       		.byte	0x1
 1242 0311 9502     		.2byte	0x295
 1243 0313 8A000000 		.4byte	0x8a
 1244 0317 37010000 		.4byte	.LLST9
 1245 031b 00       		.byte	0
 1246 031c 14       		.uleb128 0x14
 1247 031d A9030000 		.4byte	.LASF44
 1248 0321 01       		.byte	0x1
 1249 0322 B102     		.2byte	0x2b1
 1250 0324 00000000 		.4byte	.LFB15
 1251 0328 0C000000 		.4byte	.LFE15-.LFB15
 1252 032c 01       		.uleb128 0x1
 1253 032d 9C       		.byte	0x9c
 1254 032e 51030000 		.4byte	0x351
 1255 0332 11       		.uleb128 0x11
 1256 0333 6A030000 		.4byte	.LASF34
 1257 0337 01       		.byte	0x1
 1258 0338 B102     		.2byte	0x2b1
 1259 033a 8A000000 		.4byte	0x8a
 1260 033e 58010000 		.4byte	.LLST10
 1261 0342 15       		.uleb128 0x15
 1262 0343 87030000 		.4byte	.LASF45
 1263 0347 01       		.byte	0x1
 1264 0348 B102     		.2byte	0x2b1
 1265 034a 96000000 		.4byte	0x96
 1266 034e 01       		.uleb128 0x1
 1267 034f 51       		.byte	0x51
 1268 0350 00       		.byte	0
 1269 0351 14       		.uleb128 0x14
 1270 0352 F8020000 		.4byte	.LASF46
 1271 0356 01       		.byte	0x1
 1272 0357 D302     		.2byte	0x2d3
 1273 0359 00000000 		.4byte	.LFB16
 1274 035d 0C000000 		.4byte	.LFE16-.LFB16
 1275 0361 01       		.uleb128 0x1
 1276 0362 9C       		.byte	0x9c
 1277 0363 86030000 		.4byte	0x386
 1278 0367 11       		.uleb128 0x11
 1279 0368 6A030000 		.4byte	.LASF34
 1280 036c 01       		.byte	0x1
 1281 036d D302     		.2byte	0x2d3
 1282 036f 8A000000 		.4byte	0x8a
 1283 0373 79010000 		.4byte	.LLST11
 1284 0377 15       		.uleb128 0x15
 1285 0378 07000000 		.4byte	.LASF47
 1286 037c 01       		.byte	0x1
 1287 037d D302     		.2byte	0x2d3
 1288 037f A2000000 		.4byte	0xa2
 1289 0383 01       		.uleb128 0x1
 1290 0384 51       		.byte	0x51
 1291 0385 00       		.byte	0
 1292 0386 16       		.uleb128 0x16
 1293 0387 14030000 		.4byte	.LASF48
 1294 038b 01       		.byte	0x1
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 40


 1295 038c F402     		.2byte	0x2f4
 1296 038e 96000000 		.4byte	0x96
 1297 0392 00000000 		.4byte	.LFB17
 1298 0396 3C000000 		.4byte	.LFE17-.LFB17
 1299 039a 01       		.uleb128 0x1
 1300 039b 9C       		.byte	0x9c
 1301 039c D1030000 		.4byte	0x3d1
 1302 03a0 11       		.uleb128 0x11
 1303 03a1 6A030000 		.4byte	.LASF34
 1304 03a5 01       		.byte	0x1
 1305 03a6 F402     		.2byte	0x2f4
 1306 03a8 8A000000 		.4byte	0x8a
 1307 03ac 9A010000 		.4byte	.LLST12
 1308 03b0 11       		.uleb128 0x11
 1309 03b1 8E030000 		.4byte	.LASF49
 1310 03b5 01       		.byte	0x1
 1311 03b6 F402     		.2byte	0x2f4
 1312 03b8 96000000 		.4byte	0x96
 1313 03bc BB010000 		.4byte	.LLST13
 1314 03c0 12       		.uleb128 0x12
 1315 03c1 BF010000 		.4byte	.LASF50
 1316 03c5 01       		.byte	0x1
 1317 03c6 F602     		.2byte	0x2f6
 1318 03c8 96000000 		.4byte	0x96
 1319 03cc E7010000 		.4byte	.LLST14
 1320 03d0 00       		.byte	0
 1321 03d1 16       		.uleb128 0x16
 1322 03d2 94000000 		.4byte	.LASF51
 1323 03d6 01       		.byte	0x1
 1324 03d7 2A03     		.2byte	0x32a
 1325 03d9 A2000000 		.4byte	0xa2
 1326 03dd 00000000 		.4byte	.LFB18
 1327 03e1 34000000 		.4byte	.LFE18-.LFB18
 1328 03e5 01       		.uleb128 0x1
 1329 03e6 9C       		.byte	0x9c
 1330 03e7 1C040000 		.4byte	0x41c
 1331 03eb 11       		.uleb128 0x11
 1332 03ec 6A030000 		.4byte	.LASF34
 1333 03f0 01       		.byte	0x1
 1334 03f1 2A03     		.2byte	0x32a
 1335 03f3 8A000000 		.4byte	0x8a
 1336 03f7 02020000 		.4byte	.LLST15
 1337 03fb 11       		.uleb128 0x11
 1338 03fc 8E030000 		.4byte	.LASF49
 1339 0400 01       		.byte	0x1
 1340 0401 2A03     		.2byte	0x32a
 1341 0403 96000000 		.4byte	0x96
 1342 0407 23020000 		.4byte	.LLST16
 1343 040b 12       		.uleb128 0x12
 1344 040c 11010000 		.4byte	.LASF52
 1345 0410 01       		.byte	0x1
 1346 0411 2C03     		.2byte	0x32c
 1347 0413 C1000000 		.4byte	0xc1
 1348 0417 4C020000 		.4byte	.LLST17
 1349 041b 00       		.byte	0
 1350 041c 16       		.uleb128 0x16
 1351 041d 16000000 		.4byte	.LASF53
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 41


 1352 0421 01       		.byte	0x1
 1353 0422 5703     		.2byte	0x357
 1354 0424 AE000000 		.4byte	0xae
 1355 0428 00000000 		.4byte	.LFB19
 1356 042c 3C000000 		.4byte	.LFE19-.LFB19
 1357 0430 01       		.uleb128 0x1
 1358 0431 9C       		.byte	0x9c
 1359 0432 67040000 		.4byte	0x467
 1360 0436 11       		.uleb128 0x11
 1361 0437 6A030000 		.4byte	.LASF34
 1362 043b 01       		.byte	0x1
 1363 043c 5703     		.2byte	0x357
 1364 043e 8A000000 		.4byte	0x8a
 1365 0442 9C020000 		.4byte	.LLST18
 1366 0446 11       		.uleb128 0x11
 1367 0447 8E030000 		.4byte	.LASF49
 1368 044b 01       		.byte	0x1
 1369 044c 5703     		.2byte	0x357
 1370 044e 96000000 		.4byte	0x96
 1371 0452 BD020000 		.4byte	.LLST19
 1372 0456 12       		.uleb128 0x12
 1373 0457 7D010000 		.4byte	.LASF54
 1374 045b 01       		.byte	0x1
 1375 045c 5903     		.2byte	0x359
 1376 045e AE000000 		.4byte	0xae
 1377 0462 DB020000 		.4byte	.LLST20
 1378 0466 00       		.byte	0
 1379 0467 17       		.uleb128 0x17
 1380 0468 77040000 		.4byte	0x477
 1381 046c 77040000 		.4byte	0x477
 1382 0470 18       		.uleb128 0x18
 1383 0471 EC000000 		.4byte	0xec
 1384 0475 00       		.byte	0
 1385 0476 00       		.byte	0
 1386 0477 19       		.uleb128 0x19
 1387 0478 8A000000 		.4byte	0x8a
 1388 047c 1A       		.uleb128 0x1a
 1389 047d 74030000 		.4byte	.LASF55
 1390 0481 01       		.byte	0x1
 1391 0482 21       		.byte	0x21
 1392 0483 8C040000 		.4byte	0x48c
 1393 0487 04       		.byte	0x4
 1394 0488 00       		.byte	0
 1395 0489 04       		.byte	0x4
 1396 048a 00       		.byte	0
 1397 048b 00       		.byte	0
 1398 048c 19       		.uleb128 0x19
 1399 048d 67040000 		.4byte	0x467
 1400 0491 1B       		.uleb128 0x1b
 1401 0492 DF000000 		.4byte	.LASF56
 1402 0496 01       		.byte	0x1
 1403 0497 18       		.byte	0x18
 1404 0498 72000000 		.4byte	0x72
 1405 049c 05       		.uleb128 0x5
 1406 049d 03       		.byte	0x3
 1407 049e 00000000 		.4byte	ADC_initVar
 1408 04a2 17       		.uleb128 0x17
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 42


 1409 04a3 B2040000 		.4byte	0x4b2
 1410 04a7 B2040000 		.4byte	0x4b2
 1411 04ab 18       		.uleb128 0x18
 1412 04ac EC000000 		.4byte	0xec
 1413 04b0 00       		.byte	0
 1414 04b1 00       		.byte	0
 1415 04b2 05       		.uleb128 0x5
 1416 04b3 96000000 		.4byte	0x96
 1417 04b7 1B       		.uleb128 0x1b
 1418 04b8 46030000 		.4byte	.LASF57
 1419 04bc 01       		.byte	0x1
 1420 04bd 19       		.byte	0x19
 1421 04be C8040000 		.4byte	0x4c8
 1422 04c2 05       		.uleb128 0x5
 1423 04c3 03       		.byte	0x3
 1424 04c4 00000000 		.4byte	ADC_offset
 1425 04c8 05       		.uleb128 0x5
 1426 04c9 A2040000 		.4byte	0x4a2
 1427 04cd 17       		.uleb128 0x17
 1428 04ce DD040000 		.4byte	0x4dd
 1429 04d2 DD040000 		.4byte	0x4dd
 1430 04d6 18       		.uleb128 0x18
 1431 04d7 EC000000 		.4byte	0xec
 1432 04db 00       		.byte	0
 1433 04dc 00       		.byte	0
 1434 04dd 05       		.uleb128 0x5
 1435 04de A2000000 		.4byte	0xa2
 1436 04e2 1B       		.uleb128 0x1b
 1437 04e3 A8000000 		.4byte	.LASF58
 1438 04e7 01       		.byte	0x1
 1439 04e8 1A       		.byte	0x1a
 1440 04e9 F3040000 		.4byte	0x4f3
 1441 04ed 05       		.uleb128 0x5
 1442 04ee 03       		.byte	0x3
 1443 04ef 00000000 		.4byte	ADC_countsPer10Volt
 1444 04f3 05       		.uleb128 0x5
 1445 04f4 CD040000 		.4byte	0x4cd
 1446 04f8 1C       		.uleb128 0x1c
 1447 04f9 BA020000 		.4byte	.LASF59
 1448 04fd BA020000 		.4byte	.LASF59
 1449 0501 03       		.byte	0x3
 1450 0502 C0       		.byte	0xc0
 1451 0503 1C       		.uleb128 0x1c
 1452 0504 A0010000 		.4byte	.LASF60
 1453 0508 A0010000 		.4byte	.LASF60
 1454 050c 03       		.byte	0x3
 1455 050d BD       		.byte	0xbd
 1456 050e 1C       		.uleb128 0x1c
 1457 050f C2000000 		.4byte	.LASF61
 1458 0513 C2000000 		.4byte	.LASF61
 1459 0517 03       		.byte	0x3
 1460 0518 DA       		.byte	0xda
 1461 0519 00       		.byte	0
 1462              		.section	.debug_abbrev,"",%progbits
 1463              	.Ldebug_abbrev0:
 1464 0000 01       		.uleb128 0x1
 1465 0001 11       		.uleb128 0x11
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 43


 1466 0002 01       		.byte	0x1
 1467 0003 25       		.uleb128 0x25
 1468 0004 0E       		.uleb128 0xe
 1469 0005 13       		.uleb128 0x13
 1470 0006 0B       		.uleb128 0xb
 1471 0007 03       		.uleb128 0x3
 1472 0008 0E       		.uleb128 0xe
 1473 0009 1B       		.uleb128 0x1b
 1474 000a 0E       		.uleb128 0xe
 1475 000b 55       		.uleb128 0x55
 1476 000c 17       		.uleb128 0x17
 1477 000d 11       		.uleb128 0x11
 1478 000e 01       		.uleb128 0x1
 1479 000f 10       		.uleb128 0x10
 1480 0010 17       		.uleb128 0x17
 1481 0011 00       		.byte	0
 1482 0012 00       		.byte	0
 1483 0013 02       		.uleb128 0x2
 1484 0014 24       		.uleb128 0x24
 1485 0015 00       		.byte	0
 1486 0016 0B       		.uleb128 0xb
 1487 0017 0B       		.uleb128 0xb
 1488 0018 3E       		.uleb128 0x3e
 1489 0019 0B       		.uleb128 0xb
 1490 001a 03       		.uleb128 0x3
 1491 001b 0E       		.uleb128 0xe
 1492 001c 00       		.byte	0
 1493 001d 00       		.byte	0
 1494 001e 03       		.uleb128 0x3
 1495 001f 24       		.uleb128 0x24
 1496 0020 00       		.byte	0
 1497 0021 0B       		.uleb128 0xb
 1498 0022 0B       		.uleb128 0xb
 1499 0023 3E       		.uleb128 0x3e
 1500 0024 0B       		.uleb128 0xb
 1501 0025 03       		.uleb128 0x3
 1502 0026 08       		.uleb128 0x8
 1503 0027 00       		.byte	0
 1504 0028 00       		.byte	0
 1505 0029 04       		.uleb128 0x4
 1506 002a 16       		.uleb128 0x16
 1507 002b 00       		.byte	0
 1508 002c 03       		.uleb128 0x3
 1509 002d 0E       		.uleb128 0xe
 1510 002e 3A       		.uleb128 0x3a
 1511 002f 0B       		.uleb128 0xb
 1512 0030 3B       		.uleb128 0x3b
 1513 0031 05       		.uleb128 0x5
 1514 0032 49       		.uleb128 0x49
 1515 0033 13       		.uleb128 0x13
 1516 0034 00       		.byte	0
 1517 0035 00       		.byte	0
 1518 0036 05       		.uleb128 0x5
 1519 0037 35       		.uleb128 0x35
 1520 0038 00       		.byte	0
 1521 0039 49       		.uleb128 0x49
 1522 003a 13       		.uleb128 0x13
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 44


 1523 003b 00       		.byte	0
 1524 003c 00       		.byte	0
 1525 003d 06       		.uleb128 0x6
 1526 003e 2E       		.uleb128 0x2e
 1527 003f 00       		.byte	0
 1528 0040 3F       		.uleb128 0x3f
 1529 0041 19       		.uleb128 0x19
 1530 0042 03       		.uleb128 0x3
 1531 0043 0E       		.uleb128 0xe
 1532 0044 3A       		.uleb128 0x3a
 1533 0045 0B       		.uleb128 0xb
 1534 0046 3B       		.uleb128 0x3b
 1535 0047 05       		.uleb128 0x5
 1536 0048 27       		.uleb128 0x27
 1537 0049 19       		.uleb128 0x19
 1538 004a 20       		.uleb128 0x20
 1539 004b 0B       		.uleb128 0xb
 1540 004c 00       		.byte	0
 1541 004d 00       		.byte	0
 1542 004e 07       		.uleb128 0x7
 1543 004f 2E       		.uleb128 0x2e
 1544 0050 01       		.byte	0x1
 1545 0051 3F       		.uleb128 0x3f
 1546 0052 19       		.uleb128 0x19
 1547 0053 03       		.uleb128 0x3
 1548 0054 0E       		.uleb128 0xe
 1549 0055 3A       		.uleb128 0x3a
 1550 0056 0B       		.uleb128 0xb
 1551 0057 3B       		.uleb128 0x3b
 1552 0058 0B       		.uleb128 0xb
 1553 0059 27       		.uleb128 0x27
 1554 005a 19       		.uleb128 0x19
 1555 005b 11       		.uleb128 0x11
 1556 005c 01       		.uleb128 0x1
 1557 005d 12       		.uleb128 0x12
 1558 005e 06       		.uleb128 0x6
 1559 005f 40       		.uleb128 0x40
 1560 0060 18       		.uleb128 0x18
 1561 0061 9742     		.uleb128 0x2117
 1562 0063 19       		.uleb128 0x19
 1563 0064 01       		.uleb128 0x1
 1564 0065 13       		.uleb128 0x13
 1565 0066 00       		.byte	0
 1566 0067 00       		.byte	0
 1567 0068 08       		.uleb128 0x8
 1568 0069 34       		.uleb128 0x34
 1569 006a 00       		.byte	0
 1570 006b 03       		.uleb128 0x3
 1571 006c 0E       		.uleb128 0xe
 1572 006d 3A       		.uleb128 0x3a
 1573 006e 0B       		.uleb128 0xb
 1574 006f 3B       		.uleb128 0x3b
 1575 0070 0B       		.uleb128 0xb
 1576 0071 49       		.uleb128 0x49
 1577 0072 13       		.uleb128 0x13
 1578 0073 02       		.uleb128 0x2
 1579 0074 17       		.uleb128 0x17
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 45


 1580 0075 00       		.byte	0
 1581 0076 00       		.byte	0
 1582 0077 09       		.uleb128 0x9
 1583 0078 34       		.uleb128 0x34
 1584 0079 00       		.byte	0
 1585 007a 03       		.uleb128 0x3
 1586 007b 0E       		.uleb128 0xe
 1587 007c 3A       		.uleb128 0x3a
 1588 007d 0B       		.uleb128 0xb
 1589 007e 3B       		.uleb128 0x3b
 1590 007f 0B       		.uleb128 0xb
 1591 0080 49       		.uleb128 0x49
 1592 0081 13       		.uleb128 0x13
 1593 0082 1C       		.uleb128 0x1c
 1594 0083 05       		.uleb128 0x5
 1595 0084 00       		.byte	0
 1596 0085 00       		.byte	0
 1597 0086 0A       		.uleb128 0xa
 1598 0087 898201   		.uleb128 0x4109
 1599 008a 01       		.byte	0x1
 1600 008b 11       		.uleb128 0x11
 1601 008c 01       		.uleb128 0x1
 1602 008d 31       		.uleb128 0x31
 1603 008e 13       		.uleb128 0x13
 1604 008f 01       		.uleb128 0x1
 1605 0090 13       		.uleb128 0x13
 1606 0091 00       		.byte	0
 1607 0092 00       		.byte	0
 1608 0093 0B       		.uleb128 0xb
 1609 0094 8A8201   		.uleb128 0x410a
 1610 0097 00       		.byte	0
 1611 0098 02       		.uleb128 0x2
 1612 0099 18       		.uleb128 0x18
 1613 009a 9142     		.uleb128 0x2111
 1614 009c 18       		.uleb128 0x18
 1615 009d 00       		.byte	0
 1616 009e 00       		.byte	0
 1617 009f 0C       		.uleb128 0xc
 1618 00a0 898201   		.uleb128 0x4109
 1619 00a3 01       		.byte	0x1
 1620 00a4 11       		.uleb128 0x11
 1621 00a5 01       		.uleb128 0x1
 1622 00a6 31       		.uleb128 0x31
 1623 00a7 13       		.uleb128 0x13
 1624 00a8 00       		.byte	0
 1625 00a9 00       		.byte	0
 1626 00aa 0D       		.uleb128 0xd
 1627 00ab 2E       		.uleb128 0x2e
 1628 00ac 01       		.byte	0x1
 1629 00ad 31       		.uleb128 0x31
 1630 00ae 13       		.uleb128 0x13
 1631 00af 11       		.uleb128 0x11
 1632 00b0 01       		.uleb128 0x1
 1633 00b1 12       		.uleb128 0x12
 1634 00b2 06       		.uleb128 0x6
 1635 00b3 40       		.uleb128 0x40
 1636 00b4 18       		.uleb128 0x18
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 46


 1637 00b5 9742     		.uleb128 0x2117
 1638 00b7 19       		.uleb128 0x19
 1639 00b8 01       		.uleb128 0x1
 1640 00b9 13       		.uleb128 0x13
 1641 00ba 00       		.byte	0
 1642 00bb 00       		.byte	0
 1643 00bc 0E       		.uleb128 0xe
 1644 00bd 898201   		.uleb128 0x4109
 1645 00c0 00       		.byte	0
 1646 00c1 11       		.uleb128 0x11
 1647 00c2 01       		.uleb128 0x1
 1648 00c3 31       		.uleb128 0x31
 1649 00c4 13       		.uleb128 0x13
 1650 00c5 00       		.byte	0
 1651 00c6 00       		.byte	0
 1652 00c7 0F       		.uleb128 0xf
 1653 00c8 2E       		.uleb128 0x2e
 1654 00c9 00       		.byte	0
 1655 00ca 3F       		.uleb128 0x3f
 1656 00cb 19       		.uleb128 0x19
 1657 00cc 03       		.uleb128 0x3
 1658 00cd 0E       		.uleb128 0xe
 1659 00ce 3A       		.uleb128 0x3a
 1660 00cf 0B       		.uleb128 0xb
 1661 00d0 3B       		.uleb128 0x3b
 1662 00d1 05       		.uleb128 0x5
 1663 00d2 27       		.uleb128 0x27
 1664 00d3 19       		.uleb128 0x19
 1665 00d4 11       		.uleb128 0x11
 1666 00d5 01       		.uleb128 0x1
 1667 00d6 12       		.uleb128 0x12
 1668 00d7 06       		.uleb128 0x6
 1669 00d8 40       		.uleb128 0x40
 1670 00d9 18       		.uleb128 0x18
 1671 00da 9742     		.uleb128 0x2117
 1672 00dc 19       		.uleb128 0x19
 1673 00dd 00       		.byte	0
 1674 00de 00       		.byte	0
 1675 00df 10       		.uleb128 0x10
 1676 00e0 2E       		.uleb128 0x2e
 1677 00e1 01       		.byte	0x1
 1678 00e2 3F       		.uleb128 0x3f
 1679 00e3 19       		.uleb128 0x19
 1680 00e4 03       		.uleb128 0x3
 1681 00e5 0E       		.uleb128 0xe
 1682 00e6 3A       		.uleb128 0x3a
 1683 00e7 0B       		.uleb128 0xb
 1684 00e8 3B       		.uleb128 0x3b
 1685 00e9 05       		.uleb128 0x5
 1686 00ea 27       		.uleb128 0x27
 1687 00eb 19       		.uleb128 0x19
 1688 00ec 49       		.uleb128 0x49
 1689 00ed 13       		.uleb128 0x13
 1690 00ee 11       		.uleb128 0x11
 1691 00ef 01       		.uleb128 0x1
 1692 00f0 12       		.uleb128 0x12
 1693 00f1 06       		.uleb128 0x6
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 47


 1694 00f2 40       		.uleb128 0x40
 1695 00f3 18       		.uleb128 0x18
 1696 00f4 9742     		.uleb128 0x2117
 1697 00f6 19       		.uleb128 0x19
 1698 00f7 01       		.uleb128 0x1
 1699 00f8 13       		.uleb128 0x13
 1700 00f9 00       		.byte	0
 1701 00fa 00       		.byte	0
 1702 00fb 11       		.uleb128 0x11
 1703 00fc 05       		.uleb128 0x5
 1704 00fd 00       		.byte	0
 1705 00fe 03       		.uleb128 0x3
 1706 00ff 0E       		.uleb128 0xe
 1707 0100 3A       		.uleb128 0x3a
 1708 0101 0B       		.uleb128 0xb
 1709 0102 3B       		.uleb128 0x3b
 1710 0103 05       		.uleb128 0x5
 1711 0104 49       		.uleb128 0x49
 1712 0105 13       		.uleb128 0x13
 1713 0106 02       		.uleb128 0x2
 1714 0107 17       		.uleb128 0x17
 1715 0108 00       		.byte	0
 1716 0109 00       		.byte	0
 1717 010a 12       		.uleb128 0x12
 1718 010b 34       		.uleb128 0x34
 1719 010c 00       		.byte	0
 1720 010d 03       		.uleb128 0x3
 1721 010e 0E       		.uleb128 0xe
 1722 010f 3A       		.uleb128 0x3a
 1723 0110 0B       		.uleb128 0xb
 1724 0111 3B       		.uleb128 0x3b
 1725 0112 05       		.uleb128 0x5
 1726 0113 49       		.uleb128 0x49
 1727 0114 13       		.uleb128 0x13
 1728 0115 02       		.uleb128 0x2
 1729 0116 17       		.uleb128 0x17
 1730 0117 00       		.byte	0
 1731 0118 00       		.byte	0
 1732 0119 13       		.uleb128 0x13
 1733 011a 34       		.uleb128 0x34
 1734 011b 00       		.byte	0
 1735 011c 03       		.uleb128 0x3
 1736 011d 0E       		.uleb128 0xe
 1737 011e 3A       		.uleb128 0x3a
 1738 011f 0B       		.uleb128 0xb
 1739 0120 3B       		.uleb128 0x3b
 1740 0121 05       		.uleb128 0x5
 1741 0122 49       		.uleb128 0x49
 1742 0123 13       		.uleb128 0x13
 1743 0124 02       		.uleb128 0x2
 1744 0125 18       		.uleb128 0x18
 1745 0126 00       		.byte	0
 1746 0127 00       		.byte	0
 1747 0128 14       		.uleb128 0x14
 1748 0129 2E       		.uleb128 0x2e
 1749 012a 01       		.byte	0x1
 1750 012b 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 48


 1751 012c 19       		.uleb128 0x19
 1752 012d 03       		.uleb128 0x3
 1753 012e 0E       		.uleb128 0xe
 1754 012f 3A       		.uleb128 0x3a
 1755 0130 0B       		.uleb128 0xb
 1756 0131 3B       		.uleb128 0x3b
 1757 0132 05       		.uleb128 0x5
 1758 0133 27       		.uleb128 0x27
 1759 0134 19       		.uleb128 0x19
 1760 0135 11       		.uleb128 0x11
 1761 0136 01       		.uleb128 0x1
 1762 0137 12       		.uleb128 0x12
 1763 0138 06       		.uleb128 0x6
 1764 0139 40       		.uleb128 0x40
 1765 013a 18       		.uleb128 0x18
 1766 013b 9742     		.uleb128 0x2117
 1767 013d 19       		.uleb128 0x19
 1768 013e 01       		.uleb128 0x1
 1769 013f 13       		.uleb128 0x13
 1770 0140 00       		.byte	0
 1771 0141 00       		.byte	0
 1772 0142 15       		.uleb128 0x15
 1773 0143 05       		.uleb128 0x5
 1774 0144 00       		.byte	0
 1775 0145 03       		.uleb128 0x3
 1776 0146 0E       		.uleb128 0xe
 1777 0147 3A       		.uleb128 0x3a
 1778 0148 0B       		.uleb128 0xb
 1779 0149 3B       		.uleb128 0x3b
 1780 014a 05       		.uleb128 0x5
 1781 014b 49       		.uleb128 0x49
 1782 014c 13       		.uleb128 0x13
 1783 014d 02       		.uleb128 0x2
 1784 014e 18       		.uleb128 0x18
 1785 014f 00       		.byte	0
 1786 0150 00       		.byte	0
 1787 0151 16       		.uleb128 0x16
 1788 0152 2E       		.uleb128 0x2e
 1789 0153 01       		.byte	0x1
 1790 0154 3F       		.uleb128 0x3f
 1791 0155 19       		.uleb128 0x19
 1792 0156 03       		.uleb128 0x3
 1793 0157 0E       		.uleb128 0xe
 1794 0158 3A       		.uleb128 0x3a
 1795 0159 0B       		.uleb128 0xb
 1796 015a 3B       		.uleb128 0x3b
 1797 015b 05       		.uleb128 0x5
 1798 015c 27       		.uleb128 0x27
 1799 015d 19       		.uleb128 0x19
 1800 015e 49       		.uleb128 0x49
 1801 015f 13       		.uleb128 0x13
 1802 0160 11       		.uleb128 0x11
 1803 0161 01       		.uleb128 0x1
 1804 0162 12       		.uleb128 0x12
 1805 0163 06       		.uleb128 0x6
 1806 0164 40       		.uleb128 0x40
 1807 0165 18       		.uleb128 0x18
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 49


 1808 0166 9642     		.uleb128 0x2116
 1809 0168 19       		.uleb128 0x19
 1810 0169 01       		.uleb128 0x1
 1811 016a 13       		.uleb128 0x13
 1812 016b 00       		.byte	0
 1813 016c 00       		.byte	0
 1814 016d 17       		.uleb128 0x17
 1815 016e 01       		.uleb128 0x1
 1816 016f 01       		.byte	0x1
 1817 0170 49       		.uleb128 0x49
 1818 0171 13       		.uleb128 0x13
 1819 0172 01       		.uleb128 0x1
 1820 0173 13       		.uleb128 0x13
 1821 0174 00       		.byte	0
 1822 0175 00       		.byte	0
 1823 0176 18       		.uleb128 0x18
 1824 0177 21       		.uleb128 0x21
 1825 0178 00       		.byte	0
 1826 0179 49       		.uleb128 0x49
 1827 017a 13       		.uleb128 0x13
 1828 017b 2F       		.uleb128 0x2f
 1829 017c 0B       		.uleb128 0xb
 1830 017d 00       		.byte	0
 1831 017e 00       		.byte	0
 1832 017f 19       		.uleb128 0x19
 1833 0180 26       		.uleb128 0x26
 1834 0181 00       		.byte	0
 1835 0182 49       		.uleb128 0x49
 1836 0183 13       		.uleb128 0x13
 1837 0184 00       		.byte	0
 1838 0185 00       		.byte	0
 1839 0186 1A       		.uleb128 0x1a
 1840 0187 34       		.uleb128 0x34
 1841 0188 00       		.byte	0
 1842 0189 03       		.uleb128 0x3
 1843 018a 0E       		.uleb128 0xe
 1844 018b 3A       		.uleb128 0x3a
 1845 018c 0B       		.uleb128 0xb
 1846 018d 3B       		.uleb128 0x3b
 1847 018e 0B       		.uleb128 0xb
 1848 018f 49       		.uleb128 0x49
 1849 0190 13       		.uleb128 0x13
 1850 0191 1C       		.uleb128 0x1c
 1851 0192 0A       		.uleb128 0xa
 1852 0193 00       		.byte	0
 1853 0194 00       		.byte	0
 1854 0195 1B       		.uleb128 0x1b
 1855 0196 34       		.uleb128 0x34
 1856 0197 00       		.byte	0
 1857 0198 03       		.uleb128 0x3
 1858 0199 0E       		.uleb128 0xe
 1859 019a 3A       		.uleb128 0x3a
 1860 019b 0B       		.uleb128 0xb
 1861 019c 3B       		.uleb128 0x3b
 1862 019d 0B       		.uleb128 0xb
 1863 019e 49       		.uleb128 0x49
 1864 019f 13       		.uleb128 0x13
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 50


 1865 01a0 3F       		.uleb128 0x3f
 1866 01a1 19       		.uleb128 0x19
 1867 01a2 02       		.uleb128 0x2
 1868 01a3 18       		.uleb128 0x18
 1869 01a4 00       		.byte	0
 1870 01a5 00       		.byte	0
 1871 01a6 1C       		.uleb128 0x1c
 1872 01a7 2E       		.uleb128 0x2e
 1873 01a8 00       		.byte	0
 1874 01a9 3F       		.uleb128 0x3f
 1875 01aa 19       		.uleb128 0x19
 1876 01ab 3C       		.uleb128 0x3c
 1877 01ac 19       		.uleb128 0x19
 1878 01ad 6E       		.uleb128 0x6e
 1879 01ae 0E       		.uleb128 0xe
 1880 01af 03       		.uleb128 0x3
 1881 01b0 0E       		.uleb128 0xe
 1882 01b1 3A       		.uleb128 0x3a
 1883 01b2 0B       		.uleb128 0xb
 1884 01b3 3B       		.uleb128 0x3b
 1885 01b4 0B       		.uleb128 0xb
 1886 01b5 00       		.byte	0
 1887 01b6 00       		.byte	0
 1888 01b7 00       		.byte	0
 1889              		.section	.debug_loc,"",%progbits
 1890              	.Ldebug_loc0:
 1891              	.LLST0:
 1892 0000 74000000 		.4byte	.LVL5
 1893 0004 86000000 		.4byte	.LVL7
 1894 0008 0200     		.2byte	0x2
 1895 000a 30       		.byte	0x30
 1896 000b 9F       		.byte	0x9f
 1897 000c 86000000 		.4byte	.LVL7
 1898 0010 E8000000 		.4byte	.LFE3
 1899 0014 0200     		.2byte	0x2
 1900 0016 31       		.byte	0x31
 1901 0017 9F       		.byte	0x9f
 1902 0018 00000000 		.4byte	0
 1903 001c 00000000 		.4byte	0
 1904              	.LLST1:
 1905 0020 6A000000 		.4byte	.LVL2
 1906 0024 6E000000 		.4byte	.LVL3
 1907 0028 0700     		.2byte	0x7
 1908 002a 70       		.byte	0x70
 1909 002b 00       		.sleb128 0
 1910 002c 40       		.byte	0x40
 1911 002d 49       		.byte	0x49
 1912 002e 24       		.byte	0x24
 1913 002f 21       		.byte	0x21
 1914 0030 9F       		.byte	0x9f
 1915 0031 72000000 		.4byte	.LVL4
 1916 0035 74000000 		.4byte	.LVL5
 1917 0039 0100     		.2byte	0x1
 1918 003b 53       		.byte	0x53
 1919 003c 74000000 		.4byte	.LVL5
 1920 0040 E8000000 		.4byte	.LFE3
 1921 0044 0400     		.2byte	0x4
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 51


 1922 0046 0A       		.byte	0xa
 1923 0047 0004     		.2byte	0x400
 1924 0049 9F       		.byte	0x9f
 1925 004a 00000000 		.4byte	0
 1926 004e 00000000 		.4byte	0
 1927              	.LLST2:
 1928 0052 00000000 		.4byte	.LVL11
 1929 0056 10000000 		.4byte	.LVL12
 1930 005a 0100     		.2byte	0x1
 1931 005c 50       		.byte	0x50
 1932 005d 10000000 		.4byte	.LVL12
 1933 0061 2C000000 		.4byte	.LFE8
 1934 0065 0400     		.2byte	0x4
 1935 0067 F3       		.byte	0xf3
 1936 0068 01       		.uleb128 0x1
 1937 0069 50       		.byte	0x50
 1938 006a 9F       		.byte	0x9f
 1939 006b 00000000 		.4byte	0
 1940 006f 00000000 		.4byte	0
 1941              	.LLST3:
 1942 0073 00000000 		.4byte	.LVL11
 1943 0077 10000000 		.4byte	.LVL12
 1944 007b 0200     		.2byte	0x2
 1945 007d 30       		.byte	0x30
 1946 007e 9F       		.byte	0x9f
 1947 007f 16000000 		.4byte	.LVL13
 1948 0083 20000000 		.4byte	.LVL14
 1949 0087 0100     		.2byte	0x1
 1950 0089 53       		.byte	0x53
 1951 008a 00000000 		.4byte	0
 1952 008e 00000000 		.4byte	0
 1953              	.LLST4:
 1954 0092 00000000 		.4byte	.LVL16
 1955 0096 0E000000 		.4byte	.LVL18
 1956 009a 0100     		.2byte	0x1
 1957 009c 50       		.byte	0x50
 1958 009d 0E000000 		.4byte	.LVL18
 1959 00a1 14000000 		.4byte	.LFE9
 1960 00a5 0400     		.2byte	0x4
 1961 00a7 F3       		.byte	0xf3
 1962 00a8 01       		.uleb128 0x1
 1963 00a9 50       		.byte	0x50
 1964 00aa 9F       		.byte	0x9f
 1965 00ab 00000000 		.4byte	0
 1966 00af 00000000 		.4byte	0
 1967              	.LLST5:
 1968 00b3 00000000 		.4byte	.LVL19
 1969 00b7 04000000 		.4byte	.LVL20
 1970 00bb 0100     		.2byte	0x1
 1971 00bd 50       		.byte	0x50
 1972 00be 04000000 		.4byte	.LVL20
 1973 00c2 10000000 		.4byte	.LFE10
 1974 00c6 0400     		.2byte	0x4
 1975 00c8 F3       		.byte	0xf3
 1976 00c9 01       		.uleb128 0x1
 1977 00ca 50       		.byte	0x50
 1978 00cb 9F       		.byte	0x9f
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 52


 1979 00cc 00000000 		.4byte	0
 1980 00d0 00000000 		.4byte	0
 1981              	.LLST6:
 1982 00d4 00000000 		.4byte	.LVL21
 1983 00d8 04000000 		.4byte	.LVL22
 1984 00dc 0100     		.2byte	0x1
 1985 00de 50       		.byte	0x50
 1986 00df 04000000 		.4byte	.LVL22
 1987 00e3 18000000 		.4byte	.LFE11
 1988 00e7 0400     		.2byte	0x4
 1989 00e9 F3       		.byte	0xf3
 1990 00ea 01       		.uleb128 0x1
 1991 00eb 50       		.byte	0x50
 1992 00ec 9F       		.byte	0x9f
 1993 00ed 00000000 		.4byte	0
 1994 00f1 00000000 		.4byte	0
 1995              	.LLST7:
 1996 00f5 00000000 		.4byte	.LVL23
 1997 00f9 04000000 		.4byte	.LVL24
 1998 00fd 0100     		.2byte	0x1
 1999 00ff 50       		.byte	0x50
 2000 0100 04000000 		.4byte	.LVL24
 2001 0104 18000000 		.4byte	.LFE12
 2002 0108 0400     		.2byte	0x4
 2003 010a F3       		.byte	0xf3
 2004 010b 01       		.uleb128 0x1
 2005 010c 50       		.byte	0x50
 2006 010d 9F       		.byte	0x9f
 2007 010e 00000000 		.4byte	0
 2008 0112 00000000 		.4byte	0
 2009              	.LLST8:
 2010 0116 00000000 		.4byte	.LVL25
 2011 011a 04000000 		.4byte	.LVL26
 2012 011e 0100     		.2byte	0x1
 2013 0120 50       		.byte	0x50
 2014 0121 04000000 		.4byte	.LVL26
 2015 0125 10000000 		.4byte	.LFE13
 2016 0129 0400     		.2byte	0x4
 2017 012b F3       		.byte	0xf3
 2018 012c 01       		.uleb128 0x1
 2019 012d 50       		.byte	0x50
 2020 012e 9F       		.byte	0x9f
 2021 012f 00000000 		.4byte	0
 2022 0133 00000000 		.4byte	0
 2023              	.LLST9:
 2024 0137 00000000 		.4byte	.LVL27
 2025 013b 04000000 		.4byte	.LVL28
 2026 013f 0100     		.2byte	0x1
 2027 0141 50       		.byte	0x50
 2028 0142 04000000 		.4byte	.LVL28
 2029 0146 10000000 		.4byte	.LFE14
 2030 014a 0400     		.2byte	0x4
 2031 014c F3       		.byte	0xf3
 2032 014d 01       		.uleb128 0x1
 2033 014e 50       		.byte	0x50
 2034 014f 9F       		.byte	0x9f
 2035 0150 00000000 		.4byte	0
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 53


 2036 0154 00000000 		.4byte	0
 2037              	.LLST10:
 2038 0158 00000000 		.4byte	.LVL29
 2039 015c 04000000 		.4byte	.LVL30
 2040 0160 0100     		.2byte	0x1
 2041 0162 50       		.byte	0x50
 2042 0163 04000000 		.4byte	.LVL30
 2043 0167 0C000000 		.4byte	.LFE15
 2044 016b 0400     		.2byte	0x4
 2045 016d F3       		.byte	0xf3
 2046 016e 01       		.uleb128 0x1
 2047 016f 50       		.byte	0x50
 2048 0170 9F       		.byte	0x9f
 2049 0171 00000000 		.4byte	0
 2050 0175 00000000 		.4byte	0
 2051              	.LLST11:
 2052 0179 00000000 		.4byte	.LVL31
 2053 017d 04000000 		.4byte	.LVL32
 2054 0181 0100     		.2byte	0x1
 2055 0183 50       		.byte	0x50
 2056 0184 04000000 		.4byte	.LVL32
 2057 0188 0C000000 		.4byte	.LFE16
 2058 018c 0400     		.2byte	0x4
 2059 018e F3       		.byte	0xf3
 2060 018f 01       		.uleb128 0x1
 2061 0190 50       		.byte	0x50
 2062 0191 9F       		.byte	0x9f
 2063 0192 00000000 		.4byte	0
 2064 0196 00000000 		.4byte	0
 2065              	.LLST12:
 2066 019a 00000000 		.4byte	.LVL33
 2067 019e 28000000 		.4byte	.LVL37
 2068 01a2 0100     		.2byte	0x1
 2069 01a4 50       		.byte	0x50
 2070 01a5 28000000 		.4byte	.LVL37
 2071 01a9 3C000000 		.4byte	.LFE17
 2072 01ad 0400     		.2byte	0x4
 2073 01af F3       		.byte	0xf3
 2074 01b0 01       		.uleb128 0x1
 2075 01b1 50       		.byte	0x50
 2076 01b2 9F       		.byte	0x9f
 2077 01b3 00000000 		.4byte	0
 2078 01b7 00000000 		.4byte	0
 2079              	.LLST13:
 2080 01bb 00000000 		.4byte	.LVL33
 2081 01bf 10000000 		.4byte	.LVL34
 2082 01c3 0100     		.2byte	0x1
 2083 01c5 51       		.byte	0x51
 2084 01c6 10000000 		.4byte	.LVL34
 2085 01ca 16000000 		.4byte	.LVL35
 2086 01ce 0400     		.2byte	0x4
 2087 01d0 F3       		.byte	0xf3
 2088 01d1 01       		.uleb128 0x1
 2089 01d2 51       		.byte	0x51
 2090 01d3 9F       		.byte	0x9f
 2091 01d4 16000000 		.4byte	.LVL35
 2092 01d8 26000000 		.4byte	.LVL36
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 54


 2093 01dc 0100     		.2byte	0x1
 2094 01de 51       		.byte	0x51
 2095 01df 00000000 		.4byte	0
 2096 01e3 00000000 		.4byte	0
 2097              	.LLST14:
 2098 01e7 26000000 		.4byte	.LVL36
 2099 01eb 2B000000 		.4byte	.LVL38-1
 2100 01ef 0900     		.2byte	0x9
 2101 01f1 73       		.byte	0x73
 2102 01f2 00       		.sleb128 0
 2103 01f3 75       		.byte	0x75
 2104 01f4 00       		.sleb128 0
 2105 01f5 22       		.byte	0x22
 2106 01f6 71       		.byte	0x71
 2107 01f7 00       		.sleb128 0
 2108 01f8 1B       		.byte	0x1b
 2109 01f9 9F       		.byte	0x9f
 2110 01fa 00000000 		.4byte	0
 2111 01fe 00000000 		.4byte	0
 2112              	.LLST15:
 2113 0202 00000000 		.4byte	.LVL39
 2114 0206 0E000000 		.4byte	.LVL41
 2115 020a 0100     		.2byte	0x1
 2116 020c 50       		.byte	0x50
 2117 020d 0E000000 		.4byte	.LVL41
 2118 0211 34000000 		.4byte	.LFE18
 2119 0215 0400     		.2byte	0x4
 2120 0217 F3       		.byte	0xf3
 2121 0218 01       		.uleb128 0x1
 2122 0219 50       		.byte	0x50
 2123 021a 9F       		.byte	0x9f
 2124 021b 00000000 		.4byte	0
 2125 021f 00000000 		.4byte	0
 2126              	.LLST16:
 2127 0223 00000000 		.4byte	.LVL39
 2128 0227 0A000000 		.4byte	.LVL40
 2129 022b 0100     		.2byte	0x1
 2130 022d 51       		.byte	0x51
 2131 022e 0A000000 		.4byte	.LVL40
 2132 0232 18000000 		.4byte	.LVL43
 2133 0236 0100     		.2byte	0x1
 2134 0238 51       		.byte	0x51
 2135 0239 18000000 		.4byte	.LVL43
 2136 023d 1B000000 		.4byte	.LVL44-1
 2137 0241 0100     		.2byte	0x1
 2138 0243 50       		.byte	0x50
 2139 0244 00000000 		.4byte	0
 2140 0248 00000000 		.4byte	0
 2141              	.LLST17:
 2142 024c 10000000 		.4byte	.LVL42
 2143 0250 18000000 		.4byte	.LVL43
 2144 0254 1A00     		.2byte	0x1a
 2145 0256 71       		.byte	0x71
 2146 0257 00       		.sleb128 0
 2147 0258 F7       		.byte	0xf7
 2148 0259 41       		.uleb128 0x41
 2149 025a F7       		.byte	0xf7
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 55


 2150 025b 25       		.uleb128 0x25
 2151 025c 0C       		.byte	0xc
 2152 025d 80969800 		.4byte	0x989680
 2153 0261 F7       		.byte	0xf7
 2154 0262 25       		.uleb128 0x25
 2155 0263 1E       		.byte	0x1e
 2156 0264 F7       		.byte	0xf7
 2157 0265 2C       		.uleb128 0x2c
 2158 0266 74       		.byte	0x74
 2159 0267 00       		.sleb128 0
 2160 0268 F7       		.byte	0xf7
 2161 0269 33       		.uleb128 0x33
 2162 026a F7       		.byte	0xf7
 2163 026b 2C       		.uleb128 0x2c
 2164 026c 1B       		.byte	0x1b
 2165 026d F7       		.byte	0xf7
 2166 026e 25       		.uleb128 0x25
 2167 026f 9F       		.byte	0x9f
 2168 0270 18000000 		.4byte	.LVL43
 2169 0274 1B000000 		.4byte	.LVL44-1
 2170 0278 1A00     		.2byte	0x1a
 2171 027a 70       		.byte	0x70
 2172 027b 00       		.sleb128 0
 2173 027c F7       		.byte	0xf7
 2174 027d 41       		.uleb128 0x41
 2175 027e F7       		.byte	0xf7
 2176 027f 25       		.uleb128 0x25
 2177 0280 0C       		.byte	0xc
 2178 0281 80969800 		.4byte	0x989680
 2179 0285 F7       		.byte	0xf7
 2180 0286 25       		.uleb128 0x25
 2181 0287 1E       		.byte	0x1e
 2182 0288 F7       		.byte	0xf7
 2183 0289 2C       		.uleb128 0x2c
 2184 028a 74       		.byte	0x74
 2185 028b 00       		.sleb128 0
 2186 028c F7       		.byte	0xf7
 2187 028d 33       		.uleb128 0x33
 2188 028e F7       		.byte	0xf7
 2189 028f 2C       		.uleb128 0x2c
 2190 0290 1B       		.byte	0x1b
 2191 0291 F7       		.byte	0xf7
 2192 0292 25       		.uleb128 0x25
 2193 0293 9F       		.byte	0x9f
 2194 0294 00000000 		.4byte	0
 2195 0298 00000000 		.4byte	0
 2196              	.LLST18:
 2197 029c 00000000 		.4byte	.LVL46
 2198 02a0 08000000 		.4byte	.LVL47
 2199 02a4 0100     		.2byte	0x1
 2200 02a6 50       		.byte	0x50
 2201 02a7 08000000 		.4byte	.LVL47
 2202 02ab 3C000000 		.4byte	.LFE19
 2203 02af 0400     		.2byte	0x4
 2204 02b1 F3       		.byte	0xf3
 2205 02b2 01       		.uleb128 0x1
 2206 02b3 50       		.byte	0x50
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 56


 2207 02b4 9F       		.byte	0x9f
 2208 02b5 00000000 		.4byte	0
 2209 02b9 00000000 		.4byte	0
 2210              	.LLST19:
 2211 02bd 00000000 		.4byte	.LVL46
 2212 02c1 0A000000 		.4byte	.LVL48
 2213 02c5 0100     		.2byte	0x1
 2214 02c7 51       		.byte	0x51
 2215 02c8 0A000000 		.4byte	.LVL48
 2216 02cc 15000000 		.4byte	.LVL50-1
 2217 02d0 0100     		.2byte	0x1
 2218 02d2 51       		.byte	0x51
 2219 02d3 00000000 		.4byte	0
 2220 02d7 00000000 		.4byte	0
 2221              	.LLST20:
 2222 02db 10000000 		.4byte	.LVL49
 2223 02df 15000000 		.4byte	.LVL50-1
 2224 02e3 1600     		.2byte	0x16
 2225 02e5 71       		.byte	0x71
 2226 02e6 00       		.sleb128 0
 2227 02e7 F7       		.byte	0xf7
 2228 02e8 41       		.uleb128 0x41
 2229 02e9 F7       		.byte	0xf7
 2230 02ea 3A       		.uleb128 0x3a
 2231 02eb F4       		.byte	0xf4
 2232 02ec 3A       		.uleb128 0x3a
 2233 02ed 04       		.byte	0x4
 2234 02ee 00002041 		.4byte	0x41200000
 2235 02f2 1E       		.byte	0x1e
 2236 02f3 75       		.byte	0x75
 2237 02f4 00       		.sleb128 0
 2238 02f5 F7       		.byte	0xf7
 2239 02f6 33       		.uleb128 0x33
 2240 02f7 F7       		.byte	0xf7
 2241 02f8 3A       		.uleb128 0x3a
 2242 02f9 1B       		.byte	0x1b
 2243 02fa 9F       		.byte	0x9f
 2244 02fb 00000000 		.4byte	0
 2245 02ff 00000000 		.4byte	0
 2246              		.section	.debug_aranges,"",%progbits
 2247 0000 A4000000 		.4byte	0xa4
 2248 0004 0200     		.2byte	0x2
 2249 0006 00000000 		.4byte	.Ldebug_info0
 2250 000a 04       		.byte	0x4
 2251 000b 00       		.byte	0
 2252 000c 0000     		.2byte	0
 2253 000e 0000     		.2byte	0
 2254 0010 00000000 		.4byte	.LFB3
 2255 0014 E8000000 		.4byte	.LFE3-.LFB3
 2256 0018 00000000 		.4byte	.LFB4
 2257 001c 2C000000 		.4byte	.LFE4-.LFB4
 2258 0020 00000000 		.4byte	.LFB2
 2259 0024 1C000000 		.4byte	.LFE2-.LFB2
 2260 0028 00000000 		.4byte	.LFB5
 2261 002c 10000000 		.4byte	.LFE5-.LFB5
 2262 0030 00000000 		.4byte	.LFB6
 2263 0034 0C000000 		.4byte	.LFE6-.LFB6
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 57


 2264 0038 00000000 		.4byte	.LFB7
 2265 003c 02000000 		.4byte	.LFE7-.LFB7
 2266 0040 00000000 		.4byte	.LFB8
 2267 0044 2C000000 		.4byte	.LFE8-.LFB8
 2268 0048 00000000 		.4byte	.LFB9
 2269 004c 14000000 		.4byte	.LFE9-.LFB9
 2270 0050 00000000 		.4byte	.LFB10
 2271 0054 10000000 		.4byte	.LFE10-.LFB10
 2272 0058 00000000 		.4byte	.LFB11
 2273 005c 18000000 		.4byte	.LFE11-.LFB11
 2274 0060 00000000 		.4byte	.LFB12
 2275 0064 18000000 		.4byte	.LFE12-.LFB12
 2276 0068 00000000 		.4byte	.LFB13
 2277 006c 10000000 		.4byte	.LFE13-.LFB13
 2278 0070 00000000 		.4byte	.LFB14
 2279 0074 10000000 		.4byte	.LFE14-.LFB14
 2280 0078 00000000 		.4byte	.LFB15
 2281 007c 0C000000 		.4byte	.LFE15-.LFB15
 2282 0080 00000000 		.4byte	.LFB16
 2283 0084 0C000000 		.4byte	.LFE16-.LFB16
 2284 0088 00000000 		.4byte	.LFB17
 2285 008c 3C000000 		.4byte	.LFE17-.LFB17
 2286 0090 00000000 		.4byte	.LFB18
 2287 0094 34000000 		.4byte	.LFE18-.LFB18
 2288 0098 00000000 		.4byte	.LFB19
 2289 009c 3C000000 		.4byte	.LFE19-.LFB19
 2290 00a0 00000000 		.4byte	0
 2291 00a4 00000000 		.4byte	0
 2292              		.section	.debug_ranges,"",%progbits
 2293              	.Ldebug_ranges0:
 2294 0000 00000000 		.4byte	.LFB3
 2295 0004 E8000000 		.4byte	.LFE3
 2296 0008 00000000 		.4byte	.LFB4
 2297 000c 2C000000 		.4byte	.LFE4
 2298 0010 00000000 		.4byte	.LFB2
 2299 0014 1C000000 		.4byte	.LFE2
 2300 0018 00000000 		.4byte	.LFB5
 2301 001c 10000000 		.4byte	.LFE5
 2302 0020 00000000 		.4byte	.LFB6
 2303 0024 0C000000 		.4byte	.LFE6
 2304 0028 00000000 		.4byte	.LFB7
 2305 002c 02000000 		.4byte	.LFE7
 2306 0030 00000000 		.4byte	.LFB8
 2307 0034 2C000000 		.4byte	.LFE8
 2308 0038 00000000 		.4byte	.LFB9
 2309 003c 14000000 		.4byte	.LFE9
 2310 0040 00000000 		.4byte	.LFB10
 2311 0044 10000000 		.4byte	.LFE10
 2312 0048 00000000 		.4byte	.LFB11
 2313 004c 18000000 		.4byte	.LFE11
 2314 0050 00000000 		.4byte	.LFB12
 2315 0054 18000000 		.4byte	.LFE12
 2316 0058 00000000 		.4byte	.LFB13
 2317 005c 10000000 		.4byte	.LFE13
 2318 0060 00000000 		.4byte	.LFB14
 2319 0064 10000000 		.4byte	.LFE14
 2320 0068 00000000 		.4byte	.LFB15
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 58


 2321 006c 0C000000 		.4byte	.LFE15
 2322 0070 00000000 		.4byte	.LFB16
 2323 0074 0C000000 		.4byte	.LFE16
 2324 0078 00000000 		.4byte	.LFB17
 2325 007c 3C000000 		.4byte	.LFE17
 2326 0080 00000000 		.4byte	.LFB18
 2327 0084 34000000 		.4byte	.LFE18
 2328 0088 00000000 		.4byte	.LFB19
 2329 008c 3C000000 		.4byte	.LFE19
 2330 0090 00000000 		.4byte	0
 2331 0094 00000000 		.4byte	0
 2332              		.section	.debug_line,"",%progbits
 2333              	.Ldebug_line0:
 2334 0000 AE020000 		.section	.debug_str,"MS",%progbits,1
 2334      02004B00 
 2334      00000201 
 2334      FB0E0D00 
 2334      01010101 
 2335              	.LASF11:
 2336 0000 75696E74 		.ascii	"uint16\000"
 2336      313600
 2337              	.LASF47:
 2338 0007 61646347 		.ascii	"adcGain\000"
 2338      61696E00 
 2339              	.LASF24:
 2340 000f 636F756E 		.ascii	"counts\000"
 2340      747300
 2341              	.LASF53:
 2342 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2342      436F756E 
 2342      7473546F 
 2342      5F566F6C 
 2342      747300
 2343              	.LASF25:
 2344 0029 4144435F 		.ascii	"ADC_Init\000"
 2344      496E6974 
 2344      00
 2345              	.LASF0:
 2346 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2346      206C6F6E 
 2346      6720756E 
 2346      7369676E 
 2346      65642069 
 2347              	.LASF28:
 2348 0049 4144435F 		.ascii	"ADC_StartConvert\000"
 2348      53746172 
 2348      74436F6E 
 2348      76657274 
 2348      00
 2349              	.LASF1:
 2350 005a 6C6F6E67 		.ascii	"long long int\000"
 2350      206C6F6E 
 2350      6720696E 
 2350      7400
 2351              	.LASF4:
 2352 0068 7369676E 		.ascii	"signed char\000"
 2352      65642063 
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 59


 2352      68617200 
 2353              	.LASF30:
 2354 0074 73746174 		.ascii	"status\000"
 2354      757300
 2355              	.LASF14:
 2356 007b 696E7433 		.ascii	"int32\000"
 2356      3200
 2357              	.LASF26:
 2358 0081 4144435F 		.ascii	"ADC_Start\000"
 2358      53746172 
 2358      7400
 2359              	.LASF7:
 2360 008b 6C6F6E67 		.ascii	"long int\000"
 2360      20696E74 
 2360      00
 2361              	.LASF51:
 2362 0094 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2362      436F756E 
 2362      7473546F 
 2362      5F75566F 
 2362      6C747300 
 2363              	.LASF58:
 2364 00a8 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2364      636F756E 
 2364      74735065 
 2364      72313056 
 2364      6F6C7400 
 2365              	.LASF10:
 2366 00bc 75696E74 		.ascii	"uint8\000"
 2366      3800
 2367              	.LASF61:
 2368 00c2 43794465 		.ascii	"CyDelayUs\000"
 2368      6C617955 
 2368      7300
 2369              	.LASF16:
 2370 00cc 646F7562 		.ascii	"double\000"
 2370      6C6500
 2371              	.LASF12:
 2372 00d3 75696E74 		.ascii	"uint32\000"
 2372      333200
 2373              	.LASF37:
 2374 00da 6D61736B 		.ascii	"mask\000"
 2374      00
 2375              	.LASF56:
 2376 00df 4144435F 		.ascii	"ADC_initVar\000"
 2376      696E6974 
 2376      56617200 
 2377              	.LASF33:
 2378 00eb 7265744D 		.ascii	"retMode\000"
 2378      6F646500 
 2379              	.LASF42:
 2380 00f3 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2380      5365744C 
 2380      696D6974 
 2380      4D61736B 
 2380      00
 2381              	.LASF9:
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 60


 2382 0104 756E7369 		.ascii	"unsigned int\000"
 2382      676E6564 
 2382      20696E74 
 2382      00
 2383              	.LASF52:
 2384 0111 75566F6C 		.ascii	"uVolts\000"
 2384      747300
 2385              	.LASF8:
 2386 0118 6C6F6E67 		.ascii	"long unsigned int\000"
 2386      20756E73 
 2386      69676E65 
 2386      6420696E 
 2386      7400
 2387              	.LASF64:
 2388 012a 433A5C55 		.ascii	"C:\\Users\\Xavier\\Documents\\PSoC Creator\\BLE_HID"
 2388      73657273 
 2388      5C586176 
 2388      6965725C 
 2388      446F6375 
 2389 0158 5F4B6579 		.ascii	"_Keyboard01\\BLE_HID_Keyboard01.cydsn\000"
 2389      626F6172 
 2389      6430315C 
 2389      424C455F 
 2389      4849445F 
 2390              	.LASF54:
 2391 017d 766F6C74 		.ascii	"volts\000"
 2391      7300
 2392              	.LASF23:
 2393 0183 746D7052 		.ascii	"tmpRegVal\000"
 2393      65675661 
 2393      6C00
 2394              	.LASF6:
 2395 018d 73686F72 		.ascii	"short unsigned int\000"
 2395      7420756E 
 2395      7369676E 
 2395      65642069 
 2395      6E7400
 2396              	.LASF60:
 2397 01a0 4379496E 		.ascii	"CyIntSetVector\000"
 2397      74536574 
 2397      56656374 
 2397      6F7200
 2398              	.LASF29:
 2399 01af 4144435F 		.ascii	"ADC_StopConvert\000"
 2399      53746F70 
 2399      436F6E76 
 2399      65727400 
 2400              	.LASF50:
 2401 01bf 6D566F6C 		.ascii	"mVolts\000"
 2401      747300
 2402              	.LASF19:
 2403 01c6 72656733 		.ascii	"reg32\000"
 2403      3200
 2404              	.LASF15:
 2405 01cc 666C6F61 		.ascii	"float32\000"
 2405      74333200 
 2406              	.LASF21:
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 61


 2407 01d4 73697A65 		.ascii	"sizetype\000"
 2407      74797065 
 2407      00
 2408              	.LASF39:
 2409 01dd 6C6F774C 		.ascii	"lowLimit\000"
 2409      696D6974 
 2409      00
 2410              	.LASF20:
 2411 01e6 6C6F6E67 		.ascii	"long double\000"
 2411      20646F75 
 2411      626C6500 
 2412              	.LASF40:
 2413 01f2 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2413      53657448 
 2413      6967684C 
 2413      696D6974 
 2413      00
 2414              	.LASF62:
 2415 0203 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2415      43313120 
 2415      352E342E 
 2415      31203230 
 2415      31363036 
 2416 0236 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2416      20726576 
 2416      6973696F 
 2416      6E203233 
 2416      37373135 
 2417 0269 73202D66 		.ascii	"s -ffunction-sections -ffat-lto-objects\000"
 2417      66756E63 
 2417      74696F6E 
 2417      2D736563 
 2417      74696F6E 
 2418              	.LASF43:
 2419 0291 4144435F 		.ascii	"ADC_SetSatMask\000"
 2419      53657453 
 2419      61744D61 
 2419      736B00
 2420              	.LASF31:
 2421 02a0 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2421      4973456E 
 2421      64436F6E 
 2421      76657273 
 2421      696F6E00 
 2422              	.LASF17:
 2423 02b4 696E7436 		.ascii	"int64\000"
 2423      3400
 2424              	.LASF59:
 2425 02ba 4379496E 		.ascii	"CyIntSetPriority\000"
 2425      74536574 
 2425      5072696F 
 2425      72697479 
 2425      00
 2426              	.LASF36:
 2427 02cb 4144435F 		.ascii	"ADC_SetChanMask\000"
 2427      53657443 
 2427      68616E4D 
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 62


 2427      61736B00 
 2428              	.LASF63:
 2429 02db 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC.c\000"
 2429      72617465 
 2429      645F536F 
 2429      75726365 
 2429      5C50536F 
 2430              	.LASF46:
 2431 02f8 4144435F 		.ascii	"ADC_SetGain\000"
 2431      53657447 
 2431      61696E00 
 2432              	.LASF2:
 2433 0304 666C6F61 		.ascii	"float\000"
 2433      7400
 2434              	.LASF41:
 2435 030a 68696768 		.ascii	"highLimit\000"
 2435      4C696D69 
 2435      7400
 2436              	.LASF48:
 2437 0314 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2437      436F756E 
 2437      7473546F 
 2437      5F6D566F 
 2437      6C747300 
 2438              	.LASF38:
 2439 0328 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2439      5365744C 
 2439      6F774C69 
 2439      6D697400 
 2440              	.LASF5:
 2441 0338 756E7369 		.ascii	"unsigned char\000"
 2441      676E6564 
 2441      20636861 
 2441      7200
 2442              	.LASF57:
 2443 0346 4144435F 		.ascii	"ADC_offset\000"
 2443      6F666673 
 2443      657400
 2444              	.LASF3:
 2445 0351 73686F72 		.ascii	"short int\000"
 2445      7420696E 
 2445      7400
 2446              	.LASF27:
 2447 035b 4144435F 		.ascii	"ADC_Stop\000"
 2447      53746F70 
 2447      00
 2448              	.LASF22:
 2449 0364 63684E75 		.ascii	"chNum\000"
 2449      6D00
 2450              	.LASF34:
 2451 036a 6368616E 		.ascii	"chan\000"
 2451      00
 2452              	.LASF18:
 2453 036f 63686172 		.ascii	"char\000"
 2453      00
 2454              	.LASF55:
 2455 0374 4144435F 		.ascii	"ADC_channelsConfig\000"
ARM GAS  C:\Users\Xavier\AppData\Local\Temp\cc4Ob2Mj.s 			page 63


 2455      6368616E 
 2455      6E656C73 
 2455      436F6E66 
 2455      696700
 2456              	.LASF45:
 2457 0387 6F666673 		.ascii	"offset\000"
 2457      657400
 2458              	.LASF49:
 2459 038e 61646343 		.ascii	"adcCounts\000"
 2459      6F756E74 
 2459      7300
 2460              	.LASF65:
 2461 0398 4144435F 		.ascii	"ADC_Enable\000"
 2461      456E6162 
 2461      6C6500
 2462              	.LASF13:
 2463 03a3 696E7431 		.ascii	"int16\000"
 2463      3600
 2464              	.LASF44:
 2465 03a9 4144435F 		.ascii	"ADC_SetOffset\000"
 2465      5365744F 
 2465      66667365 
 2465      7400
 2466              	.LASF35:
 2467 03b7 72657375 		.ascii	"result\000"
 2467      6C7400
 2468              	.LASF32:
 2469 03be 4144435F 		.ascii	"ADC_GetResult16\000"
 2469      47657452 
 2469      6573756C 
 2469      74313600 
 2470              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
